// ==UserScript==
// @name         SDU Scanner V14.6
// @namespace    http://tampermonkey.net/
// @version      14.6
// @description  Trova la percentuale piÃ¹ alta di SDU trovate nel range di distanza dalla flotta, per funzionare la scheda della flotta specificata deve essere quella aperta per ultima
// @author       lucadjr
// @match        *://*atlas.eveeye.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function () {
    'use strict';
    let titolo = 'SDU Scanner V14.6 by lucadjr';
    let currentX = 0, currentY = 0;
    let selectedColor = 'yellow';
    let fuel = 0;
    let incidenza_sdu = 0;
    let incidenza_count = 0;
    let incidenza_growing = 0;
    let starbaseX = 0;
    let starbaseY = 0;
    let primaSBx = 0;
    let primaSBy = 0;
    let secondaSBx = 0;
    let secondaSBy = 0;

    let fleetID = "";
    let nomeFlotta = "";

    let fleetScantxt = "flotta 1 \nflotta 2";

    let nome_flotta_valore_iniziale = "";
    let maxDistancefromSB_valore_iniziale = 100; //limite default
    let maxdistanceFromSB = Infinity; //limite default
    let starbase_valore_iniziale = "";
    let fuel_range_min_valore_iniziale = 10;
    let fuel_range_max_valore_iniziale = 40;
    let prima_SB_valore_iniziale = "11,-16";
    let seconda_SB_valore_iniziale = "-14,-16";
    let colore_prima_SB = "#E6E6FA"; /* Lavender */
    let colore_seconda_SB = "#F5FFFA"; /* Mint Cream */

    let SmartRangecheckbox_value = false;
    let doublecheckbox_value = false;
    let ocrcheckbox_value = false;


    let range_cella1_valore_iniziale = 0;
    let range_cella2_valore_iniziale = 0;
    let range_cella3_valore_iniziale = 0;
    let range_area_valore_iniziale = 0;

    let coeffcount1_value = false;
    let coeffcount2_value = false;
    let coeffcount3_value = false;
    let coeffsdu1_value = false;
    let coeffsdu2_value = false;
    let coeffsdu3_value = false;
    let coeffgrowing1_value = false;
    let coeffgrowing2_value = false;
    let coeffgrowing3_value = false;

    let coeffareacount_value = false;
    let coeffareasdu_value = false;
    let coeffareagrowing_value = false;

    let sortProbRadio_value = true;
    let sortDistanceRadio_value = false;
    let sortCoeffRadio_value = false;

    let subwarpSpeed = 0;
    let scanCooldown = 0;
    let sduxScan = 0;

    let intervalId = null;
    let previousScan = new Map();
    let dati_filtrati_sb = [];

    carica_parametri();
    //////////////////////////////////////////////////////////////////////////////////////////////////////////7

    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '10px';
    container.style.right = '10px';
    container.style.zIndex = 1000;
    container.style.padding = '10px';
    container.style.backgroundColor = '#f9f9f9';
    container.style.border = '1px solid #ccc';
    container.style.borderRadius = '5px';
    container.style.width = '400px';
    container.style.maxHeight = '750px';
    //container.style.border = '1px solid black'; // Aggiungi questa linea
    document.body.appendChild(container);
    makeDraggable(container);

    const closeButton = document.createElement('button');
    closeButton.textContent = 'X';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '5px';
    closeButton.style.right = '5px';
    closeButton.style.backgroundColor = 'red';
    closeButton.style.color = 'white';
    closeButton.style.border = 'none';
    closeButton.style.borderRadius = '50%';
    closeButton.style.width = '25px';
    closeButton.style.height = '25px';
    closeButton.style.cursor = 'pointer';

    closeButton.onclick = function () {
        container.remove(); // Rimuove il div dal DOM
    };
    container.appendChild(closeButton);

    const headerContainer = document.createElement('div');
    headerContainer.style.marginBottom = '10px';
    //headerContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(headerContainer);

    // Aggiungere l'icona (puoi usare un'icona font o un'immagine)
    const icon = document.createElement('img');
    icon.src = 'https://play.staratlas.com/icon-small.png'; // Usa il tuo URL o icona
    icon.alt = 'Icona';
    icon.style.marginRight = '10px'; // Distanza tra icona e testo
    headerContainer.appendChild(icon);

    // Aggiungere il titolo
    const title = document.createElement('span');
    title.textContent = titolo;
    title.style.fontSize = '20px';
    title.style.fontWeight = 'bold';
    headerContainer.appendChild(title);

    const currentPosition = document.createElement('div');
    currentPosition.style.fontSize = '16px';
    currentPosition.style.height = '30px';
    currentPosition.style.maxHeight = '30px';
    currentPosition.style.lineHeight = '30px'; // Allinea verticalmente il testo
    currentPosition.style.overflow = 'hidden'; // Nasconde il testo che esce
    currentPosition.style.whiteSpace = 'nowrap'; // Evita il ritorno a capo
    currentPosition.style.textOverflow = 'ellipsis'; // Aggiunge i puntini se necessario
    currentPosition.textContent = 'Posizione attuale: N/A';
    currentPosition.style.marginBottom = '10px';
    currentPosition.style.backgroundColor = 'red';
    //currentPosition.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(currentPosition);

    const inputContainer = document.createElement('div');
    inputContainer.style.display = 'flex';
    inputContainer.style.marginBottom = '10px';
    //inputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(inputContainer);

    const fleetInputContainer = document.createElement('div');
    fleetInputContainer.style.display = 'flex';
    fleetInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    fleetInputContainer.style.margin = '5px';
    //fleetInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(fleetInputContainer);

    const fleetInputLabel = document.createElement('label');
    fleetInputLabel.textContent = 'Nome Flotta: ';
    fleetInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(fleetInputLabel);

    const fleetInput = document.createElement('input');
    fleetInput.type = 'text';
    fleetInput.value = nome_flotta_valore_iniziale;
    fleetInput.onclick = function () {
        toggleScan();
        const fleetNames = Array.from(document.querySelectorAll("tr.fleetList td span b"))
            .map(b => b.textContent.trim()) // Estrae il testo dentro <b>
            .filter((name, index, self) => self.indexOf(name) === index) // Rimuove duplicati

        // Pulisci la lista e aggiungi i nuovi nomi
        overlayFlotte.innerHTML = '';
        fleetNames.forEach(name => {
            const option = document.createElement('option');
            option.value = name;
            option.textContent = name;
            overlayFlotte.appendChild(option);
        });

        overlayFlotte.style.display = 'block'; // Mostra la lista
    }
    fleetInput.size = '15'
    fleetInput.style.padding = '5px';
    fleetInput.style.boxSizing = 'border-box';
    fleetInput.addEventListener('input', (e) => {
        nome_flotta_valore_iniziale = e.target.value;
        salva_parametri();
    });
    fleetInputContainer.appendChild(fleetInput);

    const SBcoordsLabel = document.createElement('label');
    SBcoordsLabel.textContent = 'SB Coords';
    fleetInputContainer.appendChild(SBcoordsLabel);

    const SBcoordsTxt = document.createElement('input');
    SBcoordsTxt.type = 'text';
    SBcoordsTxt.name = 'SBcoordsTxt';
    SBcoordsTxt.size = '5';
    SBcoordsTxt.value = starbase_valore_iniziale;
    SBcoordsTxt.style.margin = '4px';
    SBcoordsTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    SBcoordsTxt.addEventListener('input', (e) => {
        starbase_valore_iniziale = e.target.value;
        salva_parametri();
    });
    fleetInputContainer.appendChild(SBcoordsTxt);

    const DistanceRangeLabel = document.createElement('label');
    DistanceRangeLabel.textContent = 'Range from SB ';
    fleetInputContainer.appendChild(DistanceRangeLabel);

    const maxDistancefromSBTxt = document.createElement('input');
    maxDistancefromSBTxt.type = 'number';
    maxDistancefromSBTxt.name = 'maxDistancefromSBTxt';
    maxDistancefromSBTxt.size = '5';
    maxDistancefromSBTxt.value = maxDistancefromSB_valore_iniziale;
    maxDistancefromSBTxt.style.margin = '4px';
    maxDistancefromSBTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxDistancefromSBTxt.addEventListener('input', (e) => {
        maxDistancefromSB_valore_iniziale = e.target.value ? parseFloat(e.target.value) : maxDistancefromSB_valore_iniziale;
        salva_parametri();
    });
    fleetInputContainer.appendChild(maxDistancefromSBTxt);

    const divlimitcontainer = document.createElement('div');
    divlimitcontainer.style.display = 'flex';
    fleetInputContainer.appendChild(divlimitcontainer);

    const SmartRangeLabel = document.createElement('label');
    SmartRangeLabel.textContent = 'Smart range ';
    divlimitcontainer.appendChild(SmartRangeLabel);

    const SmartRangecheckbox = document.createElement('input');
    SmartRangecheckbox.type = 'checkbox';
    SmartRangecheckbox.name = 'smartrangeenable';
    SmartRangecheckbox.checked = SmartRangecheckbox_value;
    SmartRangecheckbox.addEventListener('change', function (e) {
        if (SmartRangecheckbox.checked) {
            SmartRangeContainer.style.display = 'flex';
        } else {
            SmartRangeContainer.style.display = 'none'; // Inizialmente nascosto
        }
        SmartRangecheckbox_value = e.target.checked;
        salva_parametri();
    });
    divlimitcontainer.appendChild(SmartRangecheckbox);

    const SmartRangeContainer = document.createElement('div');
    SmartRangeContainer.style.display = 'none';
    SmartRangeContainer.style.flexDirection = 'column';
    SmartRangeContainer.style.margin = '5px';
    //SmartRangeContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(SmartRangeContainer);

    const fuel_range_minContainer = document.createElement('div');
    fuel_range_minContainer.style.display = 'flex';
    //fuel_range_minContainer.style.flexDirection = 'column';
    //fuel_range_minContainer.style.margin = '5px';
    //fuel_range_minContainer.style.border = '1px solid black'; // Aggiungi questa linea
    SmartRangeContainer.appendChild(fuel_range_minContainer);

    const fuel_range_minTxt = document.createElement('input');
    fuel_range_minTxt.type = 'text';
    fuel_range_minTxt.value = '10';
    fuel_range_minTxt.name = fuel_range_min_valore_iniziale;
    fuel_range_minTxt.addEventListener('input', (e) => {
        fuel_range_min_valore_iniziale = e.target.value ? parseInt(e.target.value) : fuel_range_min_valore_iniziale;
        salva_parametri();
    });
    fuel_range_minTxt.size = '7';
    //fuel_range_minTxt.style.margin = '4px';
    fuel_range_minTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    fuel_range_minContainer.appendChild(fuel_range_minTxt);

    const fuel_range_minLabel = document.createElement('label');
    fuel_range_minLabel.textContent = 'Range min.';
    fuel_range_minContainer.appendChild(fuel_range_minLabel);

    const fuel_range_maxContainer = document.createElement('div');
    fuel_range_maxContainer.style.display = 'flex';
    //fuel_range_maxContainer.style.flexDirection = 'column';
    //fuel_range_maxContainer.style.margin = '5px';
    //fuel_range_maxContainer.style.border = '1px solid black'; // Aggiungi questa linea
    SmartRangeContainer.appendChild(fuel_range_maxContainer);

    const fuel_range_maxTxt = document.createElement('input');
    fuel_range_maxTxt.type = 'text';
    fuel_range_maxTxt.value = '40';
    fuel_range_maxTxt.name = fuel_range_max_valore_iniziale;
    fuel_range_maxTxt.addEventListener('input', (e) => {
        fuel_range_max_valore_iniziale = e.target.value ? parseInt(e.target.value) : fuel_range_max_valore_iniziale;
        salva_parametri();
    });
    fuel_range_maxTxt.size = '7';
    //fuel_range_maxTxt.style.margin = '4px';
    fuel_range_maxTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    fuel_range_maxContainer.appendChild(fuel_range_maxTxt);

    const fuel_range_maxLabel = document.createElement('label');
    fuel_range_maxLabel.textContent = 'Fuel max';
    fuel_range_maxContainer.appendChild(fuel_range_maxLabel);

    const fuelContainer = document.createElement('div');
    fuelContainer.style.display = 'flex';
    //fuelContainer.style.flexDirection = 'column';
    //fuelContainer.style.margin = '5px';
    //fuelContainer.style.border = '1px solid black'; // Aggiungi questa linea
    SmartRangeContainer.appendChild(fuelContainer);

    const fuelTxt = document.createElement('input');
    fuelTxt.type = 'text';
    fuelTxt.value = 'fuelTxt';
    fuelTxt.name = 'fuelTxt';
    fuelTxt.size = '7';
    //fuelTxt.style.margin = '4px';
    fuelTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    fuelContainer.appendChild(fuelTxt);

    const FuelLabel = document.createElement('label');
    FuelLabel.textContent = 'Fuel';
    fuelContainer.appendChild(FuelLabel);

    const doublecheckContainer = document.createElement('div');
    doublecheckContainer.style.display = 'flex';
    doublecheckContainer.style.margin = '1px';
    //doublecheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(doublecheckContainer);

    const doubleLabel = document.createElement('label');
    doubleLabel.textContent = 'Double SB';
    doublecheckContainer.appendChild(doubleLabel);

    const doublecheckbox = document.createElement('input');
    doublecheckbox.type = 'checkbox';
    doublecheckbox.name = 'doublecheckbox';
    doublecheckbox.id = 'doublecheckbox';
    doublecheckbox.checked = doublecheckbox_value;
    doublecheckbox.addEventListener('change', function (e) {
        if (doublecheckbox.checked) {
            doublecheckContainer2.style.display = 'flex';
            //colorSelect.style.display = 'block';
        } else {
            doublecheckContainer2.style.display = 'none';
        }
        doublecheckbox_value = e.target.checked;
        salva_parametri();
    });
    doublecheckContainer.appendChild(doublecheckbox);

    const doublecheckContainer2 = document.createElement('div');
    doublecheckContainer2.style.display = 'none';
    fleetInputContainer.appendChild(doublecheckContainer2);

    const prima_SBTxt = document.createElement('input');
    prima_SBTxt.type = 'text';
    prima_SBTxt.name = 'prima_SBTxt';
    prima_SBTxt.size = '5';
    prima_SBTxt.style.margin = '2px';
    prima_SBTxt.value = prima_SB_valore_iniziale;
    prima_SBTxt.addEventListener('input', (e) => {
        prima_SB_valore_iniziale = e.target.value;
        salva_parametri();
    });
    prima_SBTxt.style.backgroundColor = colore_prima_SB;
    doublecheckContainer2.appendChild(prima_SBTxt);

    const seconda_SBTxt = document.createElement('input');
    seconda_SBTxt.type = 'text';
    seconda_SBTxt.name = 'seconda_SBTxt';
    seconda_SBTxt.size = '5';
    seconda_SBTxt.style.margin = '2px';
    seconda_SBTxt.value = seconda_SB_valore_iniziale;
    seconda_SBTxt.addEventListener('input', (e) => {
        seconda_SB_valore_iniziale = e.target.value;
        salva_parametri();
    });
    seconda_SBTxt.style.backgroundColor = colore_seconda_SB;
    doublecheckContainer2.appendChild(seconda_SBTxt);

    const ocrcheckContainer = document.createElement('div');
    ocrcheckContainer.style.display = 'flex';
    ocrcheckContainer.style.margin = '1px';
    //ocrcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrcheckContainer);

    const ocrLabel = document.createElement('label');
    ocrLabel.textContent = 'Ocr facilitator ';
    ocrcheckContainer.appendChild(ocrLabel);

    const ocrcheckbox = document.createElement('input');
    ocrcheckbox.type = 'checkbox';
    ocrcheckbox.name = 'ocrenable';
    ocrcheckbox.checked = false;
    ocrcheckbox.addEventListener('change', function () {
        if (ocrcheckbox.checked) {
            ocrsizeContainer.style.display = 'flex';
            //colorSelect.style.display = 'block';
        } else {
            ocrsizeContainer.style.display = 'none';
            //colorSelect.style.display = 'none'; // Inizialmente nascosto
            ocrReset();
        }
        ocrcheckbox_value = e.target.value;
        salva_parametri();
    });
    ocrcheckContainer.appendChild(ocrcheckbox);

    const ocrsizeContainer = document.createElement('div');
    //ocrsizeContainer.style.visibility = 'hidden';
    ocrsizeContainer.style.display = 'none';
    ocrsizeContainer.style.margin = '1px';
    //ocrsizeContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrsizeContainer);

    const percsizeLabel = document.createElement('label');
    percsizeLabel.textContent = 'Size ';
    ocrsizeContainer.appendChild(percsizeLabel);

    const percsizeInput = document.createElement('input');
    percsizeInput.type = 'number';
    percsizeInput.min = '1';
    percsizeInput.max = '99'; // Limita il numero massimo a 99
    percsizeInput.value = '14';
    percsizeInput.size = '6'; // Limita l'input a due cifre
    percsizeInput.style.padding = '5px';
    percsizeInput.style.boxSizing = 'border-box';
    percsizeInput.addEventListener('input', (e) => {
        let orcsize = 0;
        orcsize = e.target.value ? parseInt(e.target.value, 10) : Infinity;
        ocrUpdatesize(orcsize);
    });
    ocrsizeContainer.appendChild(percsizeInput);

    const percsizeLabel2 = document.createElement('label');
    percsizeLabel2.textContent = 'px';
    ocrsizeContainer.appendChild(percsizeLabel2);

    // Creazione del menu a tendina (select)
    const colorSelect = document.createElement('select');
    colorSelect.style.display = 'block';
    const colors = ['yellow', 'red', 'green', 'blue', 'pink', 'orange'];
    colors.forEach(color => {
        const option = document.createElement('option');
        option.value = color;
        option.textContent = color;
        colorSelect.appendChild(option);
    });
    colorSelect.addEventListener('change', function () {
        selectedColor = colorSelect.value; // Colore selezionato
        ocrUpdatecolor(selectedColor);
    });
    ocrsizeContainer.appendChild(colorSelect);

    const paramJsonText = document.createElement('input');
    paramJsonText.style.width = '40px';
    paramJsonText.style.margin = '5px';
    fleetInputContainer.appendChild(paramJsonText);

    const distanceInputContainer = document.createElement('div');
    distanceInputContainer.style.display = 'flex';
    distanceInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    distanceInputContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    distanceInputContainer.style.marginBottom = '10px';
    //distanceInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(distanceInputContainer);

    const distanceInputLabel = document.createElement('label');
    distanceInputLabel.textContent = 'move by:';
    distanceInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    distanceInputContainer.appendChild(distanceInputLabel);

    const coeffcheckContainer1 = document.createElement('div');
    coeffcheckContainer1.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer1);

    const coeffcheckLabel1 = document.createElement('label');
    coeffcheckLabel1.textContent = 'Coeff for c1';
    coeffcheckLabel1.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer1.appendChild(coeffcheckLabel1);

    const coeffcount1 = document.createElement('input');
    coeffcount1.type = 'checkbox';
    coeffcount1.name = 'coeffcount1';
    coeffcount1.checked = coeffcount1_value;
    coeffcount1.addEventListener('change', function (e) {
        coeffcount1_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer1.appendChild(coeffcount1);

    const coeffsdu1 = document.createElement('input');
    coeffsdu1.type = 'checkbox';
    coeffsdu1.name = 'coeffsdu1';
    coeffsdu1.checked = coeffsdu1_value;
    coeffsdu1.addEventListener('change', function (e) {
        coeffsdu1_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer1.appendChild(coeffsdu1);

    const coeffgrowing1 = document.createElement('input');
    coeffgrowing1.type = 'checkbox';
    coeffgrowing1.name = 'coeffgrowing1';
    coeffgrowing1.checked = coeffgrowing1_value;
    coeffgrowing1.addEventListener('change', function (e) {
        coeffgrowing1_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer1.appendChild(coeffgrowing1);

    const distpercContainer1 = document.createElement('div');
    distpercContainer1.style.display = 'flex';
    //distpercContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer1);

    const maxdistanceFromFleetTxt1 = document.createElement('input');
    maxdistanceFromFleetTxt1.type = 'number';
    maxdistanceFromFleetTxt1.min = '0';
    maxdistanceFromFleetTxt1.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt1.step = '0.1'; // Incrementa o diminuisce di 0.1
    maxdistanceFromFleetTxt1.value = range_cella1_valore_iniziale;
    maxdistanceFromFleetTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt1.style.padding = '5px';
    maxdistanceFromFleetTxt1.style.margin = '4px';
    maxdistanceFromFleetTxt1.addEventListener('input', (e) => {
        range_cella1_valore_iniziale = parseFloat(e.target.value);
        salva_parametri();
    });
    distpercContainer1.appendChild(maxdistanceFromFleetTxt1);

    const probCellaTxt1 = document.createElement('input');
    probCellaTxt1.type = 'text';
    probCellaTxt1.name = 'probCellaTxt1';
    probCellaTxt1.size = '5';
    probCellaTxt1.value = 'prbC1Txt';
    probCellaTxt1.style.fontSize = '14px';
    probCellaTxt1.style.backgroundColor = 'yellow';
    probCellaTxt1.style.padding = '5px';
    probCellaTxt1.style.margin = '4px';
    probCellaTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer1.appendChild(probCellaTxt1);

    const cordCellaContainer1 = document.createElement('div');
    cordCellaContainer1.style.display = 'flex';
    cordCellaContainer1.style.margin = '1px';
    //cordCellaContainer1.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer1);

    const percCoordxTxt1 = document.createElement('input');
    percCoordxTxt1.type = 'text';
    percCoordxTxt1.value = 'N/A';
    percCoordxTxt1.name = 'cella_x1';
    percCoordxTxt1.size = '2';
    percCoordxTxt1.style.fontSize = '14px';
    percCoordxTxt1.style.backgroundColor = 'yellow';
    percCoordxTxt1.style.padding = '5px';
    percCoordxTxt1.style.margin = '4px';
    percCoordxTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer1.appendChild(percCoordxTxt1);

    const percCoordyTxt1 = document.createElement('input');
    percCoordyTxt1.type = 'text';
    percCoordyTxt1.value = 'N/A';
    percCoordyTxt1.name = 'cella_y1';
    percCoordyTxt1.size = '2';
    percCoordyTxt1.style.fontSize = '14px';
    percCoordyTxt1.style.backgroundColor = 'yellow';
    percCoordyTxt1.style.padding = '5px';
    percCoordyTxt1.style.margin = '4px';
    percCoordyTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer1.appendChild(percCoordyTxt1);

    const coeffcheckContainer2 = document.createElement('div');
    coeffcheckContainer2.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer2);

    const coeffcheckLabel2 = document.createElement('label');
    coeffcheckLabel2.textContent = 'Coeff for c2';
    coeffcheckLabel2.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer2.appendChild(coeffcheckLabel2);

    const coeffcount2 = document.createElement('input');
    coeffcount2.type = 'checkbox';
    coeffcount2.name = 'coeffcount2';
    coeffcount2.checked = coeffcount2_value;
    coeffcount2.addEventListener('change', function (e) {
        coeffcount2_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer2.appendChild(coeffcount2);

    const coeffsdu2 = document.createElement('input');
    coeffsdu2.type = 'checkbox';
    coeffsdu2.name = 'coeffsdu2';
    coeffsdu2.checked = coeffsdu2_value;
    coeffsdu2.addEventListener('change', function (e) {
        coeffsdu2_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer2.appendChild(coeffsdu2);

    const coeffgrowing2 = document.createElement('input');
    coeffgrowing2.type = 'checkbox';
    coeffgrowing2.name = 'coeffgrowing2';
    coeffgrowing2.checked = coeffgrowing2_value;
    coeffgrowing2.addEventListener('change', function (e) {
        coeffgrowing2_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer2.appendChild(coeffgrowing2);

    const distpercContainer2 = document.createElement('div');
    distpercContainer2.style.display = 'flex';
    //distpercContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer2);

    const maxdistanceFromFleetTxt2 = document.createElement('input');
    maxdistanceFromFleetTxt2.type = 'number';
    maxdistanceFromFleetTxt2.min = '1';
    maxdistanceFromFleetTxt2.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt2.step = '0.1'; // Incrementa o diminuisce di 0.1
    maxdistanceFromFleetTxt2.value = range_cella2_valore_iniziale;
    maxdistanceFromFleetTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt2.style.padding = '5px';
    maxdistanceFromFleetTxt2.style.margin = '4px';
    maxdistanceFromFleetTxt2.addEventListener('input', (e) => {
        range_cella2_valore_iniziale = parseFloat(e.target.value);
        salva_parametri();
    });
    distpercContainer2.appendChild(maxdistanceFromFleetTxt2);

    const probCellaTxt2 = document.createElement('input');
    probCellaTxt2.type = 'text';
    probCellaTxt2.name = 'probCellaTxt2';
    probCellaTxt2.size = '5';
    probCellaTxt2.value = 'prbC1Txt';
    probCellaTxt2.style.fontSize = '14px';
    probCellaTxt2.style.backgroundColor = 'yellow';
    probCellaTxt2.style.padding = '5px';
    probCellaTxt2.style.margin = '4px';
    probCellaTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer2.appendChild(probCellaTxt2);

    const cordCellaContainer2 = document.createElement('div');
    cordCellaContainer2.style.display = 'flex';
    cordCellaContainer2.style.margin = '1px';
    //cordCellaContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer2);

    const percCoordxTxt2 = document.createElement('input');
    percCoordxTxt2.type = 'text';
    percCoordxTxt2.value = 'N/A';
    percCoordxTxt2.name = 'cella_x2';
    percCoordxTxt2.size = '2';
    percCoordxTxt2.style.fontSize = '14px';
    percCoordxTxt2.style.backgroundColor = 'lightgreen';
    percCoordxTxt2.style.padding = '5px';
    percCoordxTxt2.style.margin = '4px';
    percCoordxTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer2.appendChild(percCoordxTxt2);

    const percCoordyTxt2 = document.createElement('input');
    percCoordyTxt2.type = 'text';
    percCoordyTxt2.value = 'N/A';
    percCoordyTxt2.name = 'cella_y2';
    percCoordyTxt2.size = '2';
    percCoordyTxt2.style.fontSize = '14px';
    percCoordyTxt2.style.backgroundColor = 'lightgreen';
    percCoordyTxt2.style.padding = '5px';
    percCoordyTxt2.style.margin = '4px';
    percCoordyTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer2.appendChild(percCoordyTxt2);

    const coeffcheckContainer3 = document.createElement('div');
    coeffcheckContainer3.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer3);

    const coeffcheckLabel3 = document.createElement('label');
    coeffcheckLabel3.textContent = 'Coeff for c3';
    coeffcheckLabel3.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer3.appendChild(coeffcheckLabel3);

    const coeffcount3 = document.createElement('input');
    coeffcount3.type = 'checkbox';
    coeffcount3.name = 'coeffcount3';
    coeffcount3.checked = coeffcount3_value;
    coeffcount3.addEventListener('change', function (e) {
        coeffcount3_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer3.appendChild(coeffcount3);

    const coeffsdu3 = document.createElement('input');
    coeffsdu3.type = 'checkbox';
    coeffsdu3.name = 'coeffsdu3';
    coeffsdu3.checked = coeffsdu3_value;
    coeffsdu3.addEventListener('change', function (e) {
        coeffsdu3_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer3.appendChild(coeffsdu3);

    const coeffgrowing3 = document.createElement('input');
    coeffgrowing3.type = 'checkbox';
    coeffgrowing3.name = 'coeffgrowing3';
    coeffgrowing3.checked = coeffgrowing3_value;
    coeffgrowing3.addEventListener('change', function (e) {
        coeffgrowing3_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckContainer3.appendChild(coeffgrowing3);

    const distpercContainer3 = document.createElement('div');
    distpercContainer3.style.display = 'flex';
    //distpercContainer3.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer3);

    const maxdistanceFromFleetTxt3 = document.createElement('input');
    maxdistanceFromFleetTxt3.type = 'number';
    maxdistanceFromFleetTxt3.min = '1';
    maxdistanceFromFleetTxt3.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt3.step = '0.1'; // Incrementa o diminuisce di 0.1
    maxdistanceFromFleetTxt3.value = range_cella3_valore_iniziale;
    maxdistanceFromFleetTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt3.style.padding = '5px';
    maxdistanceFromFleetTxt3.style.margin = '4px';
    maxdistanceFromFleetTxt3.addEventListener('input', (e) => {
        range_cella3_valore_iniziale = parseFloat(e.target.value);
        salva_parametri();
    });
    distpercContainer3.appendChild(maxdistanceFromFleetTxt3);

    const probCellaTxt3 = document.createElement('input');
    probCellaTxt3.type = 'text';
    probCellaTxt3.name = 'probCellaTxt3';
    probCellaTxt3.size = '5';
    probCellaTxt3.value = 'prbC1Txt';
    probCellaTxt3.style.fontSize = '14px';
    probCellaTxt3.style.backgroundColor = 'yellow';
    probCellaTxt3.style.padding = '5px';
    probCellaTxt3.style.margin = '4px';
    probCellaTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer3.appendChild(probCellaTxt3);

    const cordCellaContainer3 = document.createElement('div');
    cordCellaContainer3.style.display = 'flex';
    cordCellaContainer3.style.margin = '1px';
    //cordCellaContainer3.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer3);

    const percCoordxTxt3 = document.createElement('input');
    percCoordxTxt3.type = 'text';
    percCoordxTxt3.value = 'N/A';
    percCoordxTxt3.name = 'cella_x3';
    percCoordxTxt3.size = '2';
    percCoordxTxt3.style.fontSize = '14px';
    percCoordxTxt3.style.backgroundColor = 'lightblue';
    percCoordxTxt3.style.padding = '5px';
    percCoordxTxt3.style.margin = '4px';
    percCoordxTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer3.appendChild(percCoordxTxt3);

    const percCoordyTxt3 = document.createElement('input');
    percCoordyTxt3.type = 'text';
    percCoordyTxt3.value = 'N/A';
    percCoordyTxt3.name = 'cella_y3';
    percCoordyTxt3.size = '2';
    percCoordyTxt3.style.fontSize = '14px';
    percCoordyTxt3.style.backgroundColor = 'lightblue';
    percCoordyTxt3.style.padding = '5px';
    percCoordyTxt3.style.margin = '4px';
    percCoordyTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer3.appendChild(percCoordyTxt3);

    const percCoordContainer = document.createElement('div');
    percCoordContainer.style.display = 'flex';
    percCoordContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    percCoordContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    percCoordContainer.style.marginBottom = '10px';
    //percCoordContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(percCoordContainer);

    const AreaLabel = document.createElement('label');
    AreaLabel.textContent = 'max prob area';
    percCoordContainer.appendChild(AreaLabel);


    const coeffcheckareaContainer = document.createElement('div');
    coeffcheckareaContainer.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(coeffcheckareaContainer);

    const coeffcheckareaLabel = document.createElement('label');
    coeffcheckareaLabel.textContent = 'Coeff for Area';
    coeffcheckareaLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckareaContainer.appendChild(coeffcheckareaLabel);

    const coeffareacount = document.createElement('input');
    coeffareacount.type = 'checkbox';
    coeffareacount.name = 'coeffareacount';
    coeffareacount.checked = coeffareacount_value;
    coeffareacount.addEventListener('change', function (e) {
        coeffareacount_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckareaContainer.appendChild(coeffareacount);

    const coeffareasdu = document.createElement('input');
    coeffareasdu.type = 'checkbox';
    coeffareasdu.name = 'coeffareasdu';
    coeffareasdu.checked = coeffareasdu_value;
    coeffareasdu.addEventListener('change', function (e) {
        coeffareasdu_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckareaContainer.appendChild(coeffareasdu);

    const coeffareagrowing = document.createElement('input');
    coeffareagrowing.type = 'checkbox';
    coeffareagrowing.name = 'coeffareagrowing';
    coeffareagrowing.checked = coeffareagrowing_value;
    coeffareagrowing.addEventListener('change', function (e) {
        coeffareagrowing_value = e.target.checked;
        salva_parametri();
    });
    coeffcheckareaContainer.appendChild(coeffareagrowing);

    const cordAreaContainer1 = document.createElement('div');
    cordAreaContainer1.style.display = 'flex';
    cordAreaContainer1.style.margin = '1px';
    //cordAreaContainer1.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(cordAreaContainer1);

    const maxareaFromFleetTxt = document.createElement('input');
    maxareaFromFleetTxt.type = 'number';
    maxareaFromFleetTxt.min = '1';
    maxareaFromFleetTxt.max = '99'; // Limita il numero massimo a 99
    maxareaFromFleetTxt.value = range_area_valore_iniziale;
    maxareaFromFleetTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxareaFromFleetTxt.style.padding = '5px';
    maxareaFromFleetTxt.style.margin = '4px';
    maxareaFromFleetTxt.addEventListener('input', (e) => {
        range_area_valore_iniziale = parseFloat(e.target.value);
        salva_parametri();
    });
    cordAreaContainer1.appendChild(maxareaFromFleetTxt);

    const probAreaTxt = document.createElement('input');
    probAreaTxt.type = 'text';
    probAreaTxt.value = 'probAreaTxt';
    probAreaTxt.name = 'probAreaTxt';
    probAreaTxt.style.fontSize = '14px';
    probAreaTxt.size = '5';
    probAreaTxt.style.backgroundColor = 'yellow';
    probAreaTxt.style.padding = '5px';
    probAreaTxt.style.margin = '4px';
    probAreaTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer1.appendChild(probAreaTxt);

    const cordAreaContainer2 = document.createElement('div');
    cordAreaContainer2.style.display = 'flex';
    cordAreaContainer2.style.margin = '1px';
    //cordAreaContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(cordAreaContainer2);

    const cordArea_x_Txt = document.createElement('input');
    cordArea_x_Txt.type = 'text';
    cordArea_x_Txt.value = 'N/A';
    cordArea_x_Txt.name = 'area_x';
    cordArea_x_Txt.size = '2';
    cordArea_x_Txt.style.fontSize = '14px';
    cordArea_x_Txt.style.backgroundColor = 'yellow';
    cordArea_x_Txt.style.padding = '5px';
    cordArea_x_Txt.style.margin = '4px';
    cordArea_x_Txt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer2.appendChild(cordArea_x_Txt);

    const cordArea_y_Txt = document.createElement('input');
    cordArea_y_Txt.type = 'text';
    cordArea_y_Txt.value = 'N/A';
    cordArea_y_Txt.name = 'area_y';
    cordArea_y_Txt.size = '2';
    cordArea_y_Txt.style.fontSize = '14px';
    cordArea_y_Txt.style.backgroundColor = 'yellow';
    cordArea_y_Txt.style.padding = '5px';
    cordArea_y_Txt.style.margin = '4px';
    cordArea_y_Txt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer2.appendChild(cordArea_y_Txt);

    const IncidenzaCountLabel = document.createElement('label');
    IncidenzaCountLabel.textContent = 'Inc. count';
    percCoordContainer.appendChild(IncidenzaCountLabel);

    const IncidenzaCountTxt = document.createElement('input');
    IncidenzaCountTxt.name = 'IncidenzaCountTxt';
    IncidenzaCountTxt.type = 'number';
    IncidenzaCountTxt.min = '0';
    IncidenzaCountTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaCountTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaCountTxt.value = incidenza_count;
    IncidenzaCountTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaCountTxt.style.padding = '5px';
    IncidenzaCountTxt.addEventListener('input', (e) => {
        incidenza_count = parseFloat(e.target.value);
        salva_parametri();
    });
    percCoordContainer.appendChild(IncidenzaCountTxt);

    const IncidenzaSduLabel = document.createElement('label');
    IncidenzaSduLabel.textContent = 'Inc. sdu';
    percCoordContainer.appendChild(IncidenzaSduLabel);

    const IncidenzaSduTxt = document.createElement('input');
    IncidenzaSduTxt.name = 'IncidenzaSduTxt';
    IncidenzaSduTxt.type = 'number';
    IncidenzaSduTxt.min = '0';
    IncidenzaSduTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaSduTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaSduTxt.value = incidenza_sdu;
    IncidenzaSduTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaSduTxt.style.padding = '5px';
    IncidenzaSduTxt.addEventListener('input', (e) => {
        incidenza_sdu = parseFloat(e.target.value);
        salva_parametri();
    });
    percCoordContainer.appendChild(IncidenzaSduTxt);

    const IncidenzaGrowingLabel = document.createElement('label');
    IncidenzaGrowingLabel.textContent = 'Inc. growing';
    percCoordContainer.appendChild(IncidenzaGrowingLabel);

    const IncidenzaGrowingTxt = document.createElement('input');
    IncidenzaGrowingTxt.name = 'IncidenzaGrowingTxt';
    IncidenzaGrowingTxt.type = 'number';
    IncidenzaGrowingTxt.min = '0';
    IncidenzaGrowingTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaGrowingTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaGrowingTxt.value = incidenza_growing;
    IncidenzaGrowingTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaGrowingTxt.style.padding = '5px';
    IncidenzaGrowingTxt.addEventListener('input', (e) => {
        incidenza_growing = parseFloat(e.target.value);
        salva_parametri();
    });
    percCoordContainer.appendChild(IncidenzaGrowingTxt);

    const probContainer = document.createElement('div');
    probContainer.style.display = 'flex';
    probContainer.style.margin = '5px';
    //probContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(probContainer);

    const sortProbLabel = document.createElement('label');
    sortProbLabel.textContent = 'sort %';
    probContainer.appendChild(sortProbLabel);

    const sortProbRadio = document.createElement('input');
    sortProbRadio.type = 'radio';
    sortProbRadio.name = 'sortRadio';
    sortProbRadio.checked = sortProbRadio_value;
    sortProbRadio.addEventListener('change', function (e) {
        if (sortProbRadio.checked) {
            sortProbRadio_value = true;
            sortDistanceRadio_value = false;
            sortCoeffRadio_value = false;
        }
        sortProbRadio_value = e.target.checked;
        salva_parametri();
    });
    probContainer.appendChild(sortProbRadio);

    const DistanceContainer = document.createElement('div');
    DistanceContainer.style.display = 'flex';
    DistanceContainer.style.margin = '5px';
    //DistanceContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(DistanceContainer);

    const sortDistanceLabel = document.createElement('label');
    sortDistanceLabel.textContent = 'sort dist.';
    DistanceContainer.appendChild(sortDistanceLabel);

    const sortDistanceRadio = document.createElement('input');
    sortDistanceRadio.type = 'radio';
    sortDistanceRadio.name = 'sortRadio';
    sortDistanceRadio.checked = sortDistanceRadio_value;
    sortDistanceRadio.addEventListener('change', function (e) {
        if (sortDistanceRadio.checked) {
            sortDistanceRadio_value = true;
            sortProbRadio_value = false;
            sortCoeffRadio_value = false;
        }
        sortDistanceRadio_value = e.target.checked;
        salva_parametri();
    });
    DistanceContainer.appendChild(sortDistanceRadio);

    const CoeffsortCointainer = document.createElement('div');
    CoeffsortCointainer.style.display = 'flex';
    CoeffsortCointainer.style.margin = '5px';
    //CoeffsortCointainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(CoeffsortCointainer);

    const sortCoeffLabel = document.createElement('label');
    sortCoeffLabel.textContent = 'sort coeff';
    CoeffsortCointainer.appendChild(sortCoeffLabel);

    const sortCoeffRadio = document.createElement('input');
    sortCoeffRadio.type = 'radio';
    sortCoeffRadio.name = 'sortRadio';
    sortCoeffRadio.checked = sortCoeffRadio_value;
    sortCoeffRadio.addEventListener('change', function (e) {
        if (sortCoeffRadio.checked) {
            sortCoeffRadio_value = true;
            sortProbRadio_value = false;
            sortDistanceRadio_value = false;
        }
        sortCoeffRadio_value = e.target.checked;
        salva_parametri();
    });
    CoeffsortCointainer.appendChild(sortCoeffRadio);

    const buttondiv = document.createElement('div');
    container.appendChild(buttondiv);

    const button = document.createElement('button');
    button.textContent = 'Avvia Scansione Automatica';
    button.style.flex = '1';
    button.style.padding = '10px';
    button.style.marginBlock = '2px';
    button.style.backgroundColor = '#007BFF';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';
    buttondiv.appendChild(button);

    // Creazione di un elemento <select> per la lista di nomi
    const overlayFlotte = document.createElement('select');
    overlayFlotte.id = "overlayFlotte";
    overlayFlotte.style.position = 'absolute';
    overlayFlotte.style.top = '50px'; // Poco sopra il pulsante
    overlayFlotte.style.left = '10px';
    overlayFlotte.style.backgroundColor = '#ffffff'; // Sfondo bianco
    overlayFlotte.style.color = '#333'; // Testo scuro
    overlayFlotte.style.padding = '5px'; // Margine interno ridotto
    overlayFlotte.style.border = '1px solid #ccc'; // Bordo grigio chiaro
    overlayFlotte.style.borderRadius = '8px'; // Angoli arrotondati
    //overlayFlotte.style.boxShadow = '0px 4px 8px rgba(0, 0, 0, 0.2)'; // Ombreggiatura
    overlayFlotte.style.display = 'none'; // Nascondi inizialmente
    //overlayFlotte.style.width = '250px'; // Larghezza piÃ¹ compatta
    //overlayFlotte.style.height = 'auto'; // Altezza dinamica
    //overlayFlotte.style.maxHeight = '200px'; // Altezza massima con scroll
    overlayFlotte.style.overflowY = 'auto'; // Scroll verticale se necessario
    overlayFlotte.style.fontFamily = 'Arial, sans-serif'; // Font moderno
    overlayFlotte.style.fontSize = '14px'; // Dimensione del testo
    overlayFlotte.size = 10; // Mostra fino a 10 elementi contemporaneamente
    buttondiv.appendChild(overlayFlotte);

    // Aggiungi un evento per aggiornare fleetInput.value quando viene selezionato un nome
    overlayFlotte.addEventListener('change', () => {
        fleetInput.value = overlayFlotte.value; // Imposta il valore selezionato
        fleetInput.dispatchEvent(new Event('input')); // Simula l'evento 'input'
        salva_parametri(); // Salva i parametri aggiornati
        overlayFlotte.style.display = 'none'; // Nascondi la lista dopo la selezione
    });



    const tablecontainer = document.createElement('div');
    tablecontainer.style.maxHeight = '250px'; // Imposta l'altezza massima
    tablecontainer.style.overflowY = 'auto';  // Aggiunge lo scroll verticale
    tablecontainer.style.border = '1px solid black'; // Solo per debug
    tablecontainer.style.width = '100%';  // Per evitare overflow orizzontale
    tablecontainer.style.display = 'block'; // Assicura il corretto comportamento
    container.appendChild(tablecontainer);

    const table = document.createElement('table');
    table.style.width = '100%'; // La tabella deve riempire il contenitore
    table.style.height = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.marginTop = '10px';
    table.style.marginBottom = '10px';
    tablecontainer.appendChild(table);

    const byebyecontainer = document.createElement('div');
    byebyecontainer.style.border = 'solid';
    byebyecontainer.style.borderColor = 'gray';
    //byebyecontainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(byebyecontainer);

    const byebye = document.createElement('label');
    byebye.textContent = 'Report bugs, improvements or comment at lucadjr@hotmail.it                        if you like the app please donate 7sZFMdaGCATXsJuWfj19ExnLt9P7RVm4Bykmvz2Jrh5x';
    byebye.style.userSelect = 'text';
    byebyecontainer.appendChild(byebye);
    button.addEventListener('click', toggleScan);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    updateParametri();

    function makeDraggable(el) {
        el.style.position = 'absolute';
        el.style.cursor = 'move';
        let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;

        const onMouseMove = (e) => {
            e.preventDefault();
            offsetX = mouseX - e.clientX;
            offsetY = mouseY - e.clientY;
            mouseX = e.clientX;
            mouseY = e.clientY;
            el.style.top = (el.offsetTop - offsetY) + "px";
            el.style.left = (el.offsetLeft - offsetX) + "px";
        };

        const onMouseDown = (e) => {
            if (['input', 'textarea', 'button', 'table', 'label', 'select'].includes(e.target.tagName.toLowerCase()) || e.target.closest('#overlayFlotte') ) {
                return;
            }
            e.preventDefault();
            mouseX = e.clientX;
            mouseY = e.clientY;
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        el.addEventListener('mousedown', onMouseDown);
    }

    // Funzione per simulare il clic sul pulsante
    function simulateButtonClick() {
        if (typeof characterID !== 'undefined' && characterID != 0) {
            sa_getUserData(characterID);
        } else {
            toggleChars('on');
        }
    }
    // Esegui la funzione ogni 20 secondi (20000 millisecondi)
    setInterval(simulateButtonClick, 35000);

    function toggleScan() {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
            button.textContent = 'Avvia Scansione Automatica';
            button.style.backgroundColor = 'green';
        } else {
            clicca_seleziona_flotta(fleetInput.value);
            intervalId = setInterval(main_loop, 2000);
            button.textContent = 'Arresta Scansione Automatica';
            button.style.backgroundColor = 'red';

        }
    }
    // Esegui la scansione automatica ogni 2 secondi (2000 millisecondi)
    button.addEventListener('click', toggleScan);

    function main_loop() {
        updateFleetPosition();
        updateParametri();
        const celle_pagina = scanData();

        //dati_filtrati_sb = filtra_distanza_sb(celle_pagina);

        // Aggiunta delle celle mancanti dalla scansione precedente
        dati_filtrati_sb = mergeWithPreviousScan(celle_pagina);
        dati_filtrati_sb = filtra_distanza_sb(dati_filtrati_sb);
        // Ordinamento
        if (sortProbRadio.checked) {
            dati_filtrati_sb.sort((a, b) => parseInt(b.prob) - parseInt(a.prob));
        } else if (sortDistanceRadio.checked) {
            dati_filtrati_sb.sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));
        } else {
            dati_filtrati_sb.sort((a, b) => parseFloat(b.coeff) - parseFloat(a.coeff));
        }
        const bestclose = update_celle(dati_filtrati_sb);
        updateTable(dati_filtrati_sb, bestclose);


        dati_filtrati_sb = filtra_vecchi(dati_filtrati_sb);
        // Salva l'attuale scansione per il confronto con la successiva
        updatePreviousScan(dati_filtrati_sb);
    }

    function mergeWithPreviousScan(currentData) {
        let mergedData = new Map();

        currentData.forEach(cell => {
            let key = `${cell.x},${cell.y}`;
            let prevCell = previousScan.get(key);
            if (prevCell) {
                let countCurrent = parseFloat(cell.count);
                let countPrev = parseFloat(prevCell.count);
                let probCurrent = parseFloat(cell.prob);
                let probPrev = parseFloat(prevCell.prob);
                let sduPrev = parseFloat(prevCell.sdu);

                if (countCurrent > countPrev) {
                    if (probCurrent > probPrev) {
                        cell.growing = 1;
                    } else if (probCurrent < probPrev) {
                        if (sduPrev == 0) {
                            cell.growing = -1;
                        }
                    } //else {
                    //    cell.growing = 0;
                    //}
                } else {
                    // Mantieni il valore di growing dalla scansione precedente
                    cell.growing = prevCell.growing;
                }
            } else {
                cell.growing = 0;
            }
            cell.coeff = calculateCoeff(cell.prob, cell.count, cell.sdu, cell.growing, 1, 1, 1);
            mergedData.set(key, cell);
        });

        // Aggiunge le celle mancanti dalla scansione precedente
        previousScan.forEach((prevCell, key) => {
            if (!mergedData.has(key)) {
                let clonedCell = { ...prevCell }; // Cloniamo per sicurezza
                clonedCell.distance = parseFloat(calculateDistance(currentX, currentY, clonedCell.x, clonedCell.y));
                clonedCell.sdu = 0;
                clonedCell.count = 0;
                mergedData.set(key, clonedCell);
            }
        });

        return Array.from(mergedData.values());
    }


    function updatePreviousScan(filtered_data) {
        let newScan = new Map();

        filtered_data.forEach(cell => {
            let key = `${cell.x},${cell.y}`;
            let prevCell = previousScan.get(key);

            if (prevCell) {
                // Manteniamo il valore di growing SOLO SE la cella esisteva prima
                if (cell.growing === undefined) {
                    cell.growing = prevCell.growing;
                }
            }

            newScan.set(key, { ...cell });
        });

        previousScan = newScan;
    }

    function scanData() {
        const elements = document.querySelectorAll('.sector_sdu_txt');
        const data = [];
        //const existingSectors = new Set();

        elements.forEach(el => {
            const prob = el.textContent.trim();
            if (prob !== '') {
                const idParts = el.id.split('_');
                const x = parseInt(idParts[idParts.length - 2]);
                const y = parseInt(idParts[idParts.length - 1]);
                //existingSectors.add(`${x},${y}`);

                const rectId = `sector_sdu_${x}_${y}`;
                const rectElement = document.getElementById(rectId);

                const count = rectElement?.getAttribute('count') || 'N/A';
                const sdu = rectElement?.getAttribute('sdu') || 'N/A';
                const time = rectElement?.getAttribute('time') || 'N/A';
                const timeOnly = time.split(' ')[1] || 'N/A';

                const distance = parseFloat(calculateDistance(currentX, currentY, x, y));

                const key = `${x},${y}`;
                const prevCell = previousScan.get(key);
                let growing = 0;
                if (prevCell) {
                    // Manteniamo il valore di growing SOLO SE la cella esisteva prima
                    growing = prevCell.growing;
                }

                //const coeff = calculateCoeff(item.prob, item.count, item.sdu, item.growing);

                //const cellData = {coeff, prob, x, y, distance, count, sdu, time: timeOnly, growing };
                const cellData = { prob, x, y, distance, count, sdu, time: timeOnly, growing };
                data.push(cellData);
            }
        });

        return data;
    }

    function filtra_distanza_sb(data) {
        let filtered_Data = [];
        if (SmartRangecheckbox.checked) {
            maxdistanceFromSB = parseFloat(maxDistancefromSBTxt.value);
        } else {
            maxdistanceFromSB = maxDistancefromSB_valore_iniziale;
        }

        if (doublecheckbox.checked && maxdistanceFromSB >= 20) {

            const distanza_primaSB = parseFloat(calculateDistance(primaSBx, primaSBy, currentX, currentY));
            const distanza_secondaSB = parseFloat(calculateDistance(secondaSBx, secondaSBy, currentX, currentY));
            //debugTxt.value = `1: ${distanza_primaSB}, 2: ${distanza_secondaSB}`;
            const primaSBfiltered_Data = data.filter(item => distanza_primaSB <= maxdistanceFromSB);
            const secondaSBfiltered_Data = data.filter(item => distanza_secondaSB <= maxdistanceFromSB);
            filtered_Data = [...new Set([...primaSBfiltered_Data, ...secondaSBfiltered_Data])];
            if (distanza_primaSB < distanza_secondaSB) {
                SBcoordsTxt.value = `${primaSBx},${primaSBy}`;
                SBcoordsTxt.style.backgroundColor = colore_prima_SB;
            } else {
                SBcoordsTxt.value = `${secondaSBx},${secondaSBy}`;
                SBcoordsTxt.style.backgroundColor = colore_seconda_SB;
            }

        } else {
            filtered_Data = data.filter(item => parseFloat(calculateDistance(starbaseX, starbaseY, item.x, item.y)) <= maxdistanceFromSB);
        }
        return filtered_Data;
    }
    function filtra_vecchi(data) {
        const tempoGrowingInMs = 30 * 60 * 1000;  // 0.5 ore in millisecondi
        const tempoMassimoInMs = 1 * 60 * 60 * 1000;  // 1 ora in millisecondi

        const currentDate = new Date();  // Ottieni l'orario attuale

        return data.filter(item => {
            const timeString = item.time;

            // Converti l'orario UTC (assumendo che item.time sia nel formato HH:mm:ss)
            const [hours, minutes, seconds] = timeString.split(':').map(Number);
            const utcDate = new Date(Date.UTC(currentDate.getUTCFullYear(), currentDate.getUTCMonth(), currentDate.getUTCDate(), hours, minutes, seconds));

            // Calcola la differenza tra l'orario corrente e l'orario dell'elemento
            const timeDifference = currentDate - utcDate;

            // Log per debug
            //console.log(`Item time: ${timeString}, UTC Date: ${utcDate}, Time Difference: ${timeDifference}`);

            // Aggiorna l'attributo growing se Ã¨ passato abbastanza tempo
            if (timeDifference >= tempoGrowingInMs) {
                item.growing = -1;
            }

            // Restituisci solo i dati che sono piÃ¹ recenti di 'tempoMassimoInMs'
            return timeDifference <= tempoMassimoInMs;
        });
    }

    function findBestArea(data) {
        let bestArea = null;
        let maxavgCoeff = -1;
        let bestCell = null;
        // Filtra i dati per includere solo i settori entro maxareaFromFleetTxt
        const dati_filtrati_dist_fleet = data.filter(item => {
            const distanceFromFleet = parseFloat(calculateDistance(currentX, currentY, item.x, item.y));
            return distanceFromFleet <= parseFloat(maxareaFromFleetTxt.value);
        });


        // Trova il valore della cella piÃ¹ bassa
        const minProb = Math.min(...dati_filtrati_dist_fleet.map(item => parseFloat(item.prob)));

        const coeffcountchecked = coeffareacount.checked ? 1 : 0;
        const coeffsduchecked = coeffareasdu.checked ? 1 : 0;
        const coeffgrowingchecked = coeffareagrowing.checked ? 1 : 0;

        dati_filtrati_dist_fleet.forEach(item => {
            const { x, y } = item;

            const avgCoeff = prob_media_area(x, y, dati_filtrati_dist_fleet, minProb, coeffcountchecked, coeffsduchecked, coeffgrowingchecked);
            if (avgCoeff > maxavgCoeff) {
                maxavgCoeff = avgCoeff;
                bestArea = { x, y, avgCoeff };
            }
        });

        if (bestArea) {
            let minDistance = Infinity;
            let closestCell = null;
            // calcola distanza tra il centro dell'area e currentX, currentY
            let distanceToArea = parseFloat(calculateDistance(currentX, currentY, bestArea.x, bestArea.y));
            if (distanceToArea > 6) {

                // Per ogni cella nella zona di interesse, calcoliamo la distanza da currentX, currentY
                for (let dx = -2; dx <= 2; dx++) {
                    for (let dy = -2; dy <= 2; dy++) {
                        const x = bestArea.x + dx;
                        const y = bestArea.y + dy;
                        const sectorData = data.find(item => item.x === x && item.y === y);
                        if (sectorData) {
                            const coeff = calculateCoeff(sectorData.prob, sectorData.count, sectorData.sdu, sectorData.growing, 1, 1, 1);

                            // Calcola la distanza tra la cella corrente e currentX, currentY
                            const distanceToCurrent = parseFloat(calculateDistance(currentX, currentY, x, y));

                            // Se la distanza Ã¨ la piÃ¹ piccola finora, aggiorna la cella piÃ¹ vicina
                            if (distanceToCurrent < minDistance) {
                                minDistance = distanceToCurrent;
                                closestCell = { x, y, coeff, avgCoeff: bestArea.avgCoeff, distanceToCurrent };
                            }
                        }
                    }
                }

                bestCell = closestCell;  // Aggiorna bestCell per restituire la cella piÃ¹ vicina

            } else {
                bestCell = bestArea;
            }
        }
        return bestCell;
    }



    function update_celle(data) {
        const bestArea = findBestArea(data);
        cordArea_x_Txt.value = bestArea ? `${bestArea.x}` : 'N/A';
        cordArea_y_Txt.value = bestArea ? `${bestArea.y}` : 'N/A';
        if (bestArea) {
            const avgCoeff = (parseFloat(bestArea.avgCoeff)).toFixed(1);
            probAreaTxt.value = (avgCoeff).toString();
        } else {
            probAreaTxt.value = 'N/A';
        }

        const coeffCount1 = coeffcount1.checked ? 1 : 0;
        const coeffSdu1 = coeffsdu1.checked ? 1 : 0;
        const coeffGrowing1 = coeffgrowing1.checked ? 1 : 0;

        const bestclose1 = trovapercentuale(data, parseFloat(maxdistanceFromFleetTxt1.value), coeffCount1, coeffSdu1, coeffGrowing1);
        if (bestclose1 !== null) {
            probCellaTxt1.value = parseInt(bestclose1.prob).toString();// + '%';
            percCoordxTxt1.value = bestclose1 ? `${bestclose1.x}` : 'N/A';// bestclose1.x;
            percCoordyTxt1.value = bestclose1 ? `${bestclose1.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }

        const coeffCount2 = coeffcount2.checked ? 1 : 0;
        const coeffSdu2 = coeffsdu2.checked ? 1 : 0;
        const coeffGrowing2 = coeffgrowing2.checked ? 1 : 0;

        const bestclose2 = trovapercentuale(data, parseFloat(maxdistanceFromFleetTxt2.value), coeffCount2, coeffSdu2, coeffGrowing2);
        if (bestclose2 !== null) {
            probCellaTxt2.value = parseInt(bestclose2.prob).toString();// + '%';
            percCoordxTxt2.value = bestclose2 ? `${bestclose2.x}` : 'N/A';// bestclose2.x;
            percCoordyTxt2.value = bestclose2 ? `${bestclose2.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }

        const coeffCount3 = coeffcount3.checked ? 1 : 0;
        const coeffSdu3 = coeffsdu3.checked ? 1 : 0;
        const coeffGrowing3 = coeffgrowing3.checked ? 1 : 0;

        const bestclose3 = trovapercentuale(data, parseFloat(maxdistanceFromFleetTxt3.value), coeffCount3, coeffSdu3, coeffGrowing3);
        if (bestclose3 !== null) {
            probCellaTxt3.value = parseInt(bestclose3.prob).toString();// + '%';
            percCoordxTxt3.value = bestclose3 ? `${bestclose3.x}` : 'N/A';// bestclose3.x;
            percCoordyTxt3.value = bestclose3 ? `${bestclose3.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }
        return { bestclose1, bestclose2, bestclose3 };
    }

    function trovapercentuale(data, maxdistance, coeffcountchecked, coeffsduchecked, coeffgrowingchecked) {
        let maxCoeffInRange = -1;
        let closestToMaxCoeff = null;

        // ð Applichiamo il filtro simile a `findBestArea`
        const filteredData = data.filter(item => {
            const distanzacella = parseFloat(calculateDistance(currentX, currentY, item.x, item.y));
            return distanzacella <= maxdistance;
        });

        if (filteredData.length === 0) {
            return null;
        }

        // Troviamo i massimi valori di probabilitÃ  e coefficiente
        filteredData.forEach(item => {
            const coeff = calculateCoeff(item.prob, item.count, item.sdu, item.growing, coeffcountchecked, coeffsduchecked, coeffgrowingchecked);
            item.coeff = coeff;
            if (!isNaN(coeff) && coeff > maxCoeffInRange) maxCoeffInRange = coeff;
        });

        let minDistanceCoeff = Infinity;

        // Troviamo la cella con il valore massimo e distanza minima
        filteredData.forEach(item => {
            let distance = parseFloat(calculateDistance(currentX, currentY, item.x, item.y));
            let coeff = parseFloat(item.coeff);

            if (!isNaN(coeff) && coeff === maxCoeffInRange && distance < minDistanceCoeff) {
                minDistanceCoeff = distance;
                closestToMaxCoeff = item;
            }
        });

        return closestToMaxCoeff;
    }

    function prob_media_area(centerX, centerY, data, minProb, coeffcountchecked, coeffsduchecked, coeffgrowingchecked) {
        let totalCoeff = 0;
        let totalProb = 0;
        let count = 0;

        let inc_count = parseFloat(IncidenzaCountTxt.value);
        let inc_sdu = parseFloat(IncidenzaSduTxt.value);
        let inc_growing = parseFloat(IncidenzaGrowingTxt.value);
        if (coeffcountchecked != 1) {
            inc_count = 0;
        }
        if (coeffsduchecked != 1) {
            inc_sdu = 0;
        }
        if (coeffgrowingchecked != 1) {
            inc_growing = 0;
        }

        for (let dx = -2; dx <= 2; dx++) {
            for (let dy = -2; dy <= 2; dy++) {
                const x = centerX + dx;
                const y = centerY + dy;
                const sectorData = data.find(item => item.x === x && item.y === y);
                if (sectorData) {
                    const nominatore = parseInt(sectorData.prob) * ((parseInt(sectorData.growing) * inc_growing) + 1);
                    const denominatore = ((parseInt(sectorData.count) * inc_count) + 1) * ((parseInt(sectorData.sdu) * inc_sdu) + 1);
                    const coeff = nominatore / denominatore;
                    totalCoeff += coeff
                    totalProb += parseInt(sectorData.prob);
                } else {
                    totalCoeff += minProb;
                    totalProb += minProb;
                }
                count++;
            }
        }

        return count > 0 ? totalCoeff / count : 0;
    }

    function updateTable(data, bestclose) {
        table.innerHTML = `
    <tr>
        <th style="border-bottom: 1px solid #ccc;">Coeff</th>
        <th style="border-bottom: 1px solid #ccc;">Prob</th>
        <th style="border-bottom: 1px solid #ccc;">Count</th>
        <th style="border-bottom: 1px solid #ccc;">SDU</th>
        <th style="border-bottom: 1px solid #ccc;">Growing</th>
        <th style="border-bottom: 1px solid #ccc;">Distanza</th>
        <th style="border-bottom: 1px solid #ccc;">Coords</th>
        <th style="border-bottom: 1px solid #ccc;">Time</th>
    </tr>
`;
        data.forEach(item => {
            const coeff = calculateCoeff(item.prob, item.count, item.sdu, item.growing, 1, 1, 1);
            const row = document.createElement('tr');
            row.innerHTML = `<td style="border-bottom: 1px solid #ccc; text-align: center;">${coeff.toFixed(1)}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.prob}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.count}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.sdu}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.growing}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.distance}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.x},${item.y}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.time}</td>`;

            if (item === bestclose.bestclose3) {
                row.style.backgroundColor = 'lightblue';
            }
            if (item === bestclose.bestclose2) {
                row.style.backgroundColor = 'lightgreen';
            }
            if (item === bestclose.bestclose1) {
                row.style.backgroundColor = selectedColor;
            }


            if (item.distance == 0 && item.sdu == 1) {
                row.style.backgroundColor = 'red';
            }
            if (item.growing == 1) {
                row.style.color = 'green';
            } else if (item.growing == -1) {
                row.style.color = 'brown';
            } else if (item.growing == 0) {
                row.style.color = 'black';
            }

            table.appendChild(row);
        });
    }
    function calculateCoeff(prob, count, sdu, growing, coeffcountchecked, coeffsduchecked, coeffgrowingchecked) {
        let inc_count = parseFloat(IncidenzaCountTxt.value);
        let inc_sdu = parseFloat(IncidenzaSduTxt.value);
        let inc_growing = parseFloat(IncidenzaGrowingTxt.value);
        if (coeffcountchecked != 1) {
            inc_count = 0;
        }
        if (coeffsduchecked != 1) {
            inc_sdu = 0;
        }
        if (coeffgrowingchecked != 1) {
            inc_growing = 0;
        }

        const nominatore = parseInt(prob) * ((parseInt(growing) * inc_growing) + 1);
        const denominatore = ((parseInt(count) * inc_count) + 1) * ((parseInt(sdu) * inc_sdu) + 1);
        return nominatore / denominatore;
    }

    function calculateDistance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2);
    }
    function areValidCoordinates(coords) {
        return coords.every(coord => !isNaN(coord));
    }

    function updateFleetPosition() { // e starbase input

        const starbaseInput = SBcoordsTxt.value.trim();

        const starbaseInputcoords = starbaseInput.split(',').map(num => parseFloat(num.trim()));
        if (starbaseInputcoords.length !== 2 || !areValidCoordinates(starbaseInputcoords)) {
            alert("Inserisci le coordinate nel formato corretto: x,y (es. 15,-9)");
            [starbaseX, starbaseY] = [11, -16];
            toggleScan();
            return;
        } else {
            [starbaseX, starbaseY] = starbaseInputcoords;
        }

        const primaSBInput = prima_SBTxt.value.trim();
        const primaSBInputcoords = primaSBInput.split(',').map(num => parseFloat(num.trim()));
        if (primaSBInputcoords.length !== 2 || !areValidCoordinates(primaSBInputcoords)) {
            alert("Inserisci le coordinate nel formato corretto: x,y (es. 15,-9)");
            [primaSBx, primaSBy] = [11, -16];
            return;
        } else {
            [primaSBx, primaSBy] = primaSBInputcoords;
        }

        const secondaSBInput = seconda_SBTxt.value.trim();
        const secondaSBInputcoords = secondaSBInput.split(',').map(num => parseFloat(num.trim()));
        if (secondaSBInputcoords.length !== 2 || !areValidCoordinates(secondaSBInputcoords)) {
            alert("Inserisci le coordinate nel formato corretto: x,y (es. 15,-9)");
            [secondaSBx, secondaSBy] = [-14, -16];
            return;
        } else {
            [secondaSBx, secondaSBy] = secondaSBInputcoords;
        }

        const fleetRow = document.querySelector(`#fleetStats .ui_fleet span[oncontextmenu*="${nome_flotta_valore_iniziale}"]`);
        if (fleetRow) {
            const stateRow = fleetRow.closest('tr').nextElementSibling;
            const tdElement = stateRow.querySelector('#fleet_selected_state');
            if (tdElement) {
                // Estrai tutte le coordinate presenti nel td
                const coordElements = tdElement.querySelectorAll('.ui_coordinate');
                if (coordElements.length > 0) {
                    // Mappa tutte le coordinate in formato [X, Y]
                    const allCoords = Array.from(coordElements).map(coordElement =>
                        coordElement.textContent.trim().replace('|', ',')
                    );
                    // Prendi l'ultima serie di coordinate
                    const finalCoords = allCoords[allCoords.length - 1];
                    const fleetCoords = finalCoords.split(',').map(coord => parseFloat(coord.trim()));
                    if (areValidCoordinates(fleetCoords)) {
                        [currentX, currentY] = fleetCoords;
                        // Aggiorna il textContent con un messaggio flessibile
                        const scenarioDescription = tdElement.textContent
                            .replace(/\s+/g, ' ') // Rimuove spazi multipli
                            .trim();
                        currentPosition.textContent = `${scenarioDescription.replace('|', ',')}`;
                        //currentPosition.textContent = `${scenarioDescription}`;
                        currentPosition.style.backgroundColor = 'green';
                    } else {
                        alert("Le coordinate della flotta non sono valide.");
                        currentPosition.textContent = 'Posizione attuale: N/A';
                        currentPosition.style.backgroundColor = 'red';
                        toggleScan();
                        return;
                    }
                } else {
                    alert("Nessuna coordinata trovata per la flotta.");
                    currentPosition.textContent = 'Posizione attuale: N/A';
                    currentPosition.style.backgroundColor = 'red';
                    toggleScan();
                    return;
                }
            } else {
                alert("Nessuna coordinata trovata per la flotta.");
                currentPosition.textContent = 'Posizione attuale: N/A';
                currentPosition.style.backgroundColor = 'red';
                toggleScan();
                return;
            }
        } else {
            alert("Nessuna coordinata trovata per la flotta.");
            currentPosition.textContent = 'Posizione attuale: N/A';
            currentPosition.style.backgroundColor = 'red';
            toggleScan();
            return;
        }
        // Seleziona l'elemento che contiene il titolo
        let fuelBarElement = document.getElementById("fleet_selected_fuel_bar");
        // Controlla se l'attributo title esiste
        if (fuelBarElement && fuelBarElement.firstElementChild) {
            let titleText = fuelBarElement.firstElementChild.getAttribute("title");
            // Trova la percentuale usando una regex
            let match = titleText.match(/\((\d+)%\)/);
            if (match) {
                fuel = match[1]; // Estrai solo il numero

                // Inserisci la percentuale in un elemento con id "fuelPercentageDisplay"
                fuelTxt.value = fuel + "%";
                if (SmartRangecheckbox.checked) {
                    let distanza_calc_fuel = 0;
                    let fuel_range_max = parseInt(fuel_range_maxTxt.value);
                    let fuel_range_min = parseInt(fuel_range_minTxt.value);

                    if (fuel >= fuel_range_max) {
                        distanza_calc_fuel = maxDistancefromSB_valore_iniziale;
                    } else {
                        distanza_calc_fuel = Math.max(fuel_range_min, Math.floor((fuel / fuel_range_max) * maxDistancefromSB_valore_iniziale));
                    }
                    let distanza_flotta = parseFloat(calculateDistance(currentX, currentY, starbaseX, starbaseY));
                    if (distanza_calc_fuel <= distanza_flotta - 2) {
                        maxDistancefromSBTxt.value = (distanza_flotta - 2).toFixed(1);
                    } else {
                        maxDistancefromSBTxt.value = distanza_calc_fuel.toFixed(1);
                    }
                }
                else {
                    maxDistancefromSBTxt.value = maxDistancefromSB_valore_iniziale;
                }
            }
        }
        // Seleziona l'elemento con l'id "fleet_selected_cargo"
        let cargoElement = document.getElementById("fleet_selected_cargo");
        if (cargoElement) {
            let cargoText = cargoElement.innerHTML;
            // Estrarre la percentuale tra parentesi (es. 93%)
            let percentageMatch = cargoText.match(/\((\d+)%\)/);
            // Estrarre il numero prima di "Food" (es. 31124)
            let foodMatch = cargoText.match(/([\d,.]+)\s*<span style="color:#08f414">Food<\/span>/);
        }
    }
    function ocrUpdatesize(size) {
        let sizestr = String(size) + 'px';

        maxdistanceFromFleetTxt1.style.fontSize = sizestr;
        probCellaTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordxTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordyTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        maxdistanceFromFleetTxt1.style.fontSize = sizestr;
        probCellaTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordxTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordyTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        maxdistanceFromFleetTxt1.style.fontSize = sizestr;
        probCellaTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordxTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordyTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        maxareaFromFleetTxt.style.fontSize = sizestr;
        probAreaTxt.style.fontSize = sizestr; // Modifica la dimensione del font
        cordArea_x_Txt.style.fontSize = sizestr; // Modifica la dimensione del font
        cordArea_y_Txt.style.fontSize = sizestr; // Modifica la dimensione del font
        let sizeelement = String(50 + 3 * (size - 13)) + 'px';

        maxdistanceFromFleetTxt1.style.width = sizeelement;
        probCellaTxt1.style.width = sizeelement; // Modifica la dimensione del font
        percCoordxTxt1.style.width = sizeelement; // Modifica la dimensione del font
        percCoordyTxt1.style.width = sizeelement; // Modifica la dimensione del font
        maxdistanceFromFleetTxt2.style.width = sizeelement;
        probCellaTxt2.style.width = sizeelement; // Modifica la dimensione del font
        percCoordxTxt2.style.width = sizeelement; // Modifica la dimensione del font
        percCoordyTxt2.style.width = sizeelement; // Modifica la dimensione del font
        maxdistanceFromFleetTxt3.style.width = sizeelement;
        probCellaTxt3.style.width = sizeelement; // Modifica la dimensione del font
        percCoordxTxt3.style.width = sizeelement; // Modifica la dimensione del font
        percCoordyTxt3.style.width = sizeelement; // Modifica la dimensione del font
        maxareaFromFleetTxt.style.width = sizeelement;
        probAreaTxt.style.width = sizeelement; // Modifica la dimensione del font
        cordArea_x_Txt.style.width = sizeelement; // Modifica la dimensione del font
        cordArea_y_Txt.style.width = sizeelement; // Modifica la dimensione del font
    }
    function ocrUpdatecolor(color) {
        probCellaTxt1.style.backgroundColor = color; // Colore di sfondo giallo
        probCellaTxt2.style.backgroundColor = color; // Colore di sfondo giallo
        probCellaTxt3.style.backgroundColor = color; // Colore di sfondo giallo
        probAreaTxt.style.backgroundColor = color; // Colore di sfondo giallo
    }
    function ocrReset() {
        ocrUpdatesize(14);
        selectedColor = 'yellow';
        ocrUpdatecolor(selectedColor);
    }

    function trova_fleet_id() {
        // Trova il <td> con attributo fleet uguale a fleetname
        const td = document.querySelector(`td[fleet="${fleetInput.value}"]`);

        if (!td) {
            console.warn(`Nessun td trovato con fleet="${fleetInput.value}"`);
            return;
        }

        // Estrai la funzione fleet_populateDetails dall'attributo onclick
        const onclickAttr = td.getAttribute("onclick");
        const match = onclickAttr.match(/fleet_populateDetails\('([^']+)'\)/);

        if (match && match[1]) {
            const fleetId = match[1];
            //console.log("Valore estratto da fleet_populateDetails:", fleetId);

            // Costruisci l'id da cercare
            const targetId = `fleet_${fleetId}_tab`;
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                //console.log("Elemento trovato con id:", targetId, targetElement);
                // Puoi fare qualcosa qui, ad esempio evidenziarlo
                targetElement.style.border = "2px solid red";
            } else {
                console.warn("Nessun elemento trovato con id:", targetId);
            }
            return fleetId
        } else {
            console.warn("Nessun match trovato per fleet_populateDetails() in onclick");
            return "error"
        }

    }

    function updateParametri() {
        // Trova il contenitore principale
        let fleetStats = document.querySelector("#fleet_stats");
        let value = '';

        if (fleetStats) {
            // Cerca tutti i <tr> dentro #fleet_stats
            let rows = fleetStats.querySelectorAll("tr");

            rows.forEach(row => {
                let firstTd = row.querySelector("td:first-child"); // Primo <td> della riga

                if (firstTd) {
                    let label = firstTd.textContent.trim(); // Testo del primo <td>
                    let valueTd = firstTd.nextElementSibling; // Secondo <td> (il valore)

                    if (valueTd) {
                        value = valueTd.textContent.trim();

                        if (label.includes("Subwarp Speed")) {
                            subwarpSpeed = value;
                        } else if (label.includes("Scan Cooldown")) {
                            scanCooldown = value;
                        } else if (label.includes("SDU per Scan")) {
                            sduxScan = value;
                        }
                    }
                }
            });
        }

        else {
            console.log("errore updateParametri fleetstat");
        }
        fleetID = trova_fleet_id();
        // Creazione JSON
        let parametriJson = JSON.stringify({
            nomeFlotta: fleetInput.value,
            idFlotta: fleetID,
            sbCoords: SBcoordsTxt.value,
            rangeSB: maxDistancefromSBTxt.value,
            smartRange: SmartRangecheckbox.checked,
            fuel: fuelTxt.value,


            coeffcount1: coeffcount1.checked,
            coeffsdu1: coeffsdu1.checked,
            coeffgrowing1: coeffgrowing1.checked,
            maxdistanceFromFleet1: maxdistanceFromFleetTxt1.value,
            probCella1: probCellaTxt1.value,
            percCoordx1: percCoordxTxt1.value,
            percCoordy1: percCoordyTxt1.value,

            coeffcount2: coeffcount2.checked,
            coeffsdu2: coeffsdu2.checked,
            coeffgrowing2: coeffgrowing2.checked,
            maxdistanceFromFleet2: maxdistanceFromFleetTxt2.value,
            probCella2: probCellaTxt2.value,
            percCoordx2: percCoordxTxt2.value,
            percCoordy2: percCoordyTxt2.value,

            coeffcount3: coeffcount3.checked,
            coeffsdu3: coeffsdu3.checked,
            coeffgrowing3: coeffgrowing3.checked,
            maxdistanceFromFleet3: maxdistanceFromFleetTxt3.value,
            probCella3: probCellaTxt3.value,
            percCoordx3: percCoordxTxt3.value,
            percCoordy3: percCoordyTxt3.value,

            coeffareacount: coeffareacount.checked,
            coeffareasdu: coeffareasdu.checked,
            coeffareagrowing: coeffareagrowing.checked,
            maxareaFromFleet: maxareaFromFleetTxt.value,
            probArea: probAreaTxt.value,
            cordArea_x: cordArea_x_Txt.value,
            cordArea_y: cordArea_y_Txt.value,


            IncidenzaCount: IncidenzaCountTxt.value,
            IncidenzaSdu: IncidenzaSduTxt.value,
            IncidenzaGrowing: IncidenzaGrowingTxt.value,

            subwarpSpeed: subwarpSpeed,
            scanCooldown: scanCooldown,
            sduxScan: sduxScan
        });

        // Assegna il JSON a paramJsonText.value
        paramJsonText.value = parametriJson;

        if (SmartRangecheckbox_value) {
            SmartRangecheckbox.checked = true;
            SmartRangeContainer.style.display = 'flex';
        } else {
            SmartRangecheckbox.checked = false;
            SmartRangeContainer.style.display = 'none'; // Inizialmente nascosto
        }
        if (doublecheckbox_value) {
            doublecheckbox.checked = true;
            doublecheckContainer2.style.display = 'flex';
            //colorSelect.style.display = 'block';
        } else {
            doublecheckbox.checked = false;
            doublecheckContainer2.style.display = 'none';
        }
        if (ocrcheckbox_value) {
            ocrcheckbox.checked = true;
            ocrsizeContainer.style.display = 'flex';
            //colorSelect.style.display = 'block';
        } else {
            ocrcheckbox.checked = false;
            ocrsizeContainer.style.display = 'none';
            //colorSelect.style.display = 'none'; // Inizialmente nascosto
            ocrReset();
        }

    }

    function clicca_seleziona_flotta(fleetName) {
        // Trova l'elemento <tr> con la classe "mnu_row syncicon"
        const fleetMenuRow = Array.from(document.querySelectorAll("td.mnu_title"))
        .find(td => td.textContent.trim() === "FLEETS");

        if (fleetMenuRow) {
            // Simula un clic sull'elemento
            fleetMenuRow.click();
            console.log("Elemento cliccato con successo!");
        } else {
            console.error("Elemento non trovato!");
        }

        // Trova il <td> con il nome della flotta specificato
        const fleetElement = document.querySelector(`td span[oncontextmenu*="${fleetName}"]`);

        if (fleetElement) {
            // Simula il clic sull'elemento
            fleetElement.click();
            console.log(`Elemento con nome flotta "${fleetName}" cliccato con successo!`);
        } else {
            console.error(`Elemento con nome flotta "${fleetName}" non trovato.`);
        }
        if (fleetMenuRow) {
            // Simula un clic sull'elemento
            fleetMenuRow.click();}
    }

    function salva_parametri() {
        // Esegui altre azioni basate su questi parametri
        // Se non ci sono parametri salvati, creiamo e salviamo un oggetto predefinito
        let parametriSalvati = {
            nome_flotta_valore_iniziale: nome_flotta_valore_iniziale,
            maxDistancefromSB_valore_iniziale: maxDistancefromSB_valore_iniziale,
            starbase_valore_iniziale: starbase_valore_iniziale,

            SmartRangecheckbox_value: SmartRangecheckbox_value,
            fuel_range_min_valore_iniziale: fuel_range_min_valore_iniziale,
            fuel_range_max_valore_iniziale: fuel_range_max_valore_iniziale,

            doublecheckbox_value: doublecheckbox_value,
            prima_SB_valore_iniziale: prima_SB_valore_iniziale,
            seconda_SB_valore_iniziale: seconda_SB_valore_iniziale,

            ocrcheckbox_value: ocrcheckbox_value,

            range_cella1_valore_iniziale: range_cella1_valore_iniziale,
            range_cella2_valore_iniziale: range_cella2_valore_iniziale,
            range_cella3_valore_iniziale: range_cella3_valore_iniziale,
            range_area_valore_iniziale: range_area_valore_iniziale,

            incidenza_sdu: incidenza_sdu,
            incidenza_count: incidenza_count,
            incidenza_growing: incidenza_growing,

            coeffcount1_value: coeffcount1_value,
            coeffcount2_value: coeffcount2_value,
            coeffcount3_value: coeffcount3_value,
            coeffsdu1_value: coeffsdu1_value,
            coeffsdu2_value: coeffsdu2_value,
            coeffsdu3_value: coeffsdu3_value,
            coeffgrowing1_value: coeffgrowing1_value,
            coeffgrowing2_value: coeffgrowing2_value,
            coeffgrowing3_value: coeffgrowing3_value,

            coeffareacount_value: coeffareacount_value,
            coeffareasdu_value: coeffareasdu_value,
            coeffareagrowing_value: coeffareagrowing_value,

            sortProbRadio_value: sortProbRadio_value,
            sortDistanceRadio_value: sortDistanceRadio_value,
            sortCoeffRadio_value: sortCoeffRadio_value,
        };
        GM_setValue("parametriSalvati", JSON.stringify(parametriSalvati));
    }
    function carica_parametri() {
        // Controlla se i parametri sono giÃ  salvati
        let parametriSalvati = GM_getValue("parametriSalvati", null);

        if (parametriSalvati) {
            // Se i parametri esistono, li carica e li converte in oggetto
            parametriSalvati = JSON.parse(parametriSalvati);

            nome_flotta_valore_iniziale = parametriSalvati.nome_flotta_valore_iniziale || "My Fleet";  // Imposta un valore di default se il parametro non esiste
            maxDistancefromSB_valore_iniziale = parametriSalvati.maxDistancefromSB_valore_iniziale || 100; //limite default
            starbase_valore_iniziale = parametriSalvati.starbase_valore_iniziale || "11,-16";

            SmartRangecheckbox_value = parametriSalvati.SmartRangecheckbox_value | false;
            fuel_range_min_valore_iniziale = parametriSalvati.fuel_range_min_valore_iniziale || 10;
            fuel_range_max_valore_iniziale = parametriSalvati.fuel_range_max_valore_iniziale || 40;

            doublecheckbox_value = parametriSalvati.doublecheckbox_value | false;
            prima_SB_valore_iniziale = parametriSalvati.prima_SBTxt || "11,-16";
            seconda_SB_valore_iniziale = parametriSalvati.seconda_SBTxt || "-14,-16";

            ocrcheckbox_value = parametriSalvati.ocrcheckbox_value || false;

            range_cella1_valore_iniziale = parametriSalvati.range_cella1_valore_iniziale || 0;
            range_cella2_valore_iniziale = parametriSalvati.range_cella2_valore_iniziale || 0;
            range_cella3_valore_iniziale = parametriSalvati.range_cella3_valore_iniziale || 0;
            range_area_valore_iniziale = parametriSalvati.range_area_valore_iniziale || 0;

            incidenza_sdu = parametriSalvati.incidenza_sdu || 0;
            incidenza_count = parametriSalvati.incidenza_count || 0;
            incidenza_growing = parametriSalvati.incidenza_growing || 0;

            coeffcount1_value = parametriSalvati.coeffcount1_value || false;
            coeffcount2_value = parametriSalvati.coeffcount2_value || false;
            coeffcount3_value = parametriSalvati.coeffcount3_value || false;
            coeffsdu1_value = parametriSalvati.coeffsdu1_value || false;
            coeffsdu2_value = parametriSalvati.coeffsdu2_value || false;
            coeffsdu3_value = parametriSalvati.coeffsdu3_value || false;
            coeffgrowing1_value = parametriSalvati.coeffgrowing1_value || false;
            coeffgrowing2_value = parametriSalvati.coeffgrowing2_value || false;
            coeffgrowing3_value = parametriSalvati.coeffgrowing3_value || false;

            coeffareacount_value = parametriSalvati.coeffareacount_value || false;
            coeffareasdu_value = parametriSalvati.coeffareasdu_value || false;
            coeffareagrowing_value = parametriSalvati.coeffareagrowing_value || false;

            sortProbRadio_value = parametriSalvati.sortProbRadio_value || true;
            sortDistanceRadio_value = parametriSalvati.sortDistanceRadio_value || false;
            sortCoeffRadio_value = parametriSalvati.sortCoeffRadio_value || false;

        }


    }

})();
