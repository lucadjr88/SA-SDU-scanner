// ==UserScript==
// @name         SDU Scanner V12.9
// @namespace    http://tampermonkey.net/
// @version      12.9
// @description  Trova la percentuale piÃ¹ alta di SDU trovate nel range di distanza dalla flotta, per funzionare la scheda della flotta specificata deve essere quella aperta per ultima
// @author       lucadjr
// @match        *://*atlas.eveeye.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
    let titolo = 'SDU Scanner V12.9 by lucadjr';
    let currentX = 0, currentY = 0;
    let fleetName = 'My Fleet';
    let selectedColor = 'yellow';
    let fuel = 0;
    let foodValue = 0;
    let incidenza_sdu = 0.2;
    let incidenza_count = 0.4;
    let maxdistanceFromSB = Infinity; //limite default
    let maxDistancefromSB_valore_iniziale = 30;
    let starbaseX = 0;
    let starbaseY = 0;

    function makeDraggable(el) {
        el.style.position = 'absolute';
        el.style.cursor = 'move';
        let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;

        const onMouseMove = (e) => {
            e.preventDefault();
            offsetX = mouseX - e.clientX;
            offsetY = mouseY - e.clientY;
            mouseX = e.clientX;
            mouseY = e.clientY;
            el.style.top = (el.offsetTop - offsetY) + "px";
            el.style.left = (el.offsetLeft - offsetX) + "px";
        };

        const onMouseDown = (e) => {
            if (['input', 'textarea', 'button', 'table', 'label', 'select'].includes(e.target.tagName.toLowerCase())) {
                return;
            }
            e.preventDefault();
            mouseX = e.clientX;
            mouseY = e.clientY;
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        el.addEventListener('mousedown', onMouseDown);
    }

    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '10px';
    container.style.right = '10px';
    container.style.zIndex = 1000;
    container.style.padding = '10px';
    container.style.backgroundColor = '#f9f9f9';
    container.style.border = '1px solid #ccc';
    container.style.borderRadius = '5px';
    container.style.width = '400px';
    container.style.maxHeight = '700px';
    //container.style.border = '1px solid black'; // Aggiungi questa linea
    document.body.appendChild(container);
    makeDraggable(container);

    const closeButton = document.createElement('button');
    closeButton.textContent = 'X';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '5px';
    closeButton.style.right = '5px';
    closeButton.style.backgroundColor = 'red';
    closeButton.style.color = 'white';
    closeButton.style.border = 'none';
    closeButton.style.borderRadius = '50%';
    closeButton.style.width = '25px';
    closeButton.style.height = '25px';
    closeButton.style.cursor = 'pointer';

    closeButton.onclick = function () {
        container.remove(); // Rimuove il div dal DOM
    };
    container.appendChild(closeButton);

    const headerContainer = document.createElement('div');
    headerContainer.style.marginBottom = '10px';
    //headerContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(headerContainer);

    // Aggiungere l'icona (puoi usare un'icona font o un'immagine)
    const icon = document.createElement('img');
    icon.src = 'https://play.staratlas.com/icon-small.png'; // Usa il tuo URL o icona
    icon.alt = 'Icona';
    icon.style.marginRight = '10px'; // Distanza tra icona e testo
    headerContainer.appendChild(icon);

    // Aggiungere il titolo
    const title = document.createElement('span');
    title.textContent = titolo;
    title.style.fontSize = '20px';
    title.style.fontWeight = 'bold';
    headerContainer.appendChild(title);

    const currentPosition = document.createElement('div');
    currentPosition.textContent = 'Posizione attuale: N/A';
    currentPosition.style.marginBottom = '10px';
    currentPosition.style.backgroundColor = 'red';
    //currentPosition.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(currentPosition);

    const inputContainer = document.createElement('div');
    inputContainer.style.display = 'flex';
    inputContainer.style.marginBottom = '10px';
    //inputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(inputContainer);

    const fleetInputContainer = document.createElement('div');
    fleetInputContainer.style.display = 'flex';
    fleetInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    fleetInputContainer.style.margin = '5px';
    //fleetInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(fleetInputContainer);

    const fleetInputLabel = document.createElement('label');
    fleetInputLabel.textContent = 'Nome Flotta: ';
    fleetInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(fleetInputLabel);

    const fleetInput = document.createElement('input');
    fleetInput.type = 'text';
    fleetInput.value = fleetName;
    fleetInput.size = '15'
    fleetInput.style.padding = '5px';
    fleetInput.style.boxSizing = 'border-box';
    fleetInput.addEventListener('input', (e) => {
        fleetName = e.target.value;
    });
    fleetInputContainer.appendChild(fleetInput);

    const percLabel = document.createElement('label');
    percLabel.textContent = '%';
    percLabel.style.margin = '7px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(percLabel);

    const coordResultLabel = document.createElement('label');
    coordResultLabel.textContent = 'Coords';
    coordResultLabel.style.margin = '7px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(coordResultLabel);

    const divlimitcontainer = document.createElement('div');
    divlimitcontainer.style.display = 'flex';
    fleetInputContainer.appendChild(divlimitcontainer);

    const DistanceLimitLabel = document.createElement('label');
    DistanceLimitLabel.textContent = 'Distance limit ';
    divlimitcontainer.appendChild(DistanceLimitLabel);

    const DistanceLimitcheckbox = document.createElement('input');
    DistanceLimitcheckbox.type = 'checkbox';
    DistanceLimitcheckbox.name = 'distancelimitenable';
    DistanceLimitcheckbox.checked = true;
    DistanceLimitcheckbox.addEventListener('change', function () {
        if (DistanceLimitcheckbox.checked) {
            DistanceLimitContainer.style.display = 'flex';
        } else {
            DistanceLimitContainer.style.display = 'none'; // Inizialmente nascosto
        }
    });
    divlimitcontainer.appendChild(DistanceLimitcheckbox);

    const DistanceLimitContainer = document.createElement('div');
    DistanceLimitContainer.style.display = 'flex';
    DistanceLimitContainer.style.flexDirection = 'column';
    DistanceLimitContainer.style.margin = '5px';
    //DistanceLimitContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(DistanceLimitContainer);

    const maxDistancefromSBTxt = document.createElement('input');
    maxDistancefromSBTxt.type = 'number';
    maxDistancefromSBTxt.name = 'maxDistancefromSBTxt';
    maxDistancefromSBTxt.size = '5';
    maxDistancefromSBTxt.value = '30';
    maxDistancefromSBTxt.style.margin = '4px';
    maxDistancefromSBTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxDistancefromSBTxt.addEventListener('input', (e) => {
        maxDistancefromSB_valore_iniziale = e.target.value ? parseInt(e.target.value, 10) : maxDistancefromSB_valore_iniziale;
    });
    DistanceLimitContainer.appendChild(maxDistancefromSBTxt);

    const SBcoordsTxt = document.createElement('input');
    SBcoordsTxt.type = 'text';
    SBcoordsTxt.value = 'SBcoordsTxt';
    SBcoordsTxt.name = 'SBcoordsTxt';
    SBcoordsTxt.size = '5';
    SBcoordsTxt.value = '11,-16';
    SBcoordsTxt.style.margin = '4px';
    SBcoordsTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(SBcoordsTxt);

    const fuelTxt = document.createElement('input');
    fuelTxt.type = 'text';
    fuelTxt.value = 'fuelTxt';
    fuelTxt.name = 'fuelTxt';
    fuelTxt.size = '7';
    fuelTxt.style.margin = '4px';
    fuelTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(fuelTxt);

    const ocrcheckContainer = document.createElement('div');
    ocrcheckContainer.style.display = 'flex';
    ocrcheckContainer.style.margin = '1px';
    //ocrcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrcheckContainer);

    const ocrLabel = document.createElement('label');
    ocrLabel.textContent = 'Ocr facilitator ';
    ocrcheckContainer.appendChild(ocrLabel);

    const ocrcheckbox = document.createElement('input');
    ocrcheckbox.type = 'checkbox';
    ocrcheckbox.name = 'ocrenable';
    ocrcheckbox.checked = false;
    ocrcheckbox.addEventListener('change', function () {
        if (ocrcheckbox.checked) {
            ocrsizeContainer.style.visibility = 'visible';
            colorSelect.style.display = 'block';
        } else {
            ocrsizeContainer.style.visibility = 'hidden';
            colorSelect.style.display = 'none'; // Inizialmente nascosto
            ocrUpdatesize(14);
            selectedColor = 'yellow';
            ocrUpdatecolor(selectedColor);
        }
    });
    ocrcheckContainer.appendChild(ocrcheckbox);

    const ocrsizeContainer = document.createElement('div');
    ocrsizeContainer.style.visibility = 'hidden';
    ocrsizeContainer.style.display = 'center';
    ocrsizeContainer.style.margin = '1px';
    //ocrsizeContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrsizeContainer);

    const percsizeLabel = document.createElement('label');
    percsizeLabel.textContent = 'Size ';
    ocrsizeContainer.appendChild(percsizeLabel);

    const percsizeInput = document.createElement('input');
    percsizeInput.type = 'number';
    percsizeInput.min = '1';
    percsizeInput.max = '99'; // Limita il numero massimo a 99
    percsizeInput.value = '14';
    percsizeInput.size = '6'; // Limita l'input a due cifre
    percsizeInput.style.padding = '5px';
    percsizeInput.style.boxSizing = 'border-box';
    percsizeInput.addEventListener('input', (e) => {
        let orcsize = 0;
        orcsize = e.target.value ? parseInt(e.target.value, 10) : Infinity;
        ocrUpdatesize(orcsize);
    });
    ocrsizeContainer.appendChild(percsizeInput);

    const percsizeLabel2 = document.createElement('label');
    percsizeLabel2.textContent = 'px';
    ocrsizeContainer.appendChild(percsizeLabel2);

    // Creazione del menu a tendina (select)
    const colorSelect = document.createElement('select');
    colorSelect.style.display = 'none';
    const colors = ['yellow', 'red', 'green', 'blue', 'pink', 'orange'];
    colors.forEach(color => {
        const option = document.createElement('option');
        option.value = color;
        option.textContent = color;
        colorSelect.appendChild(option);
    });
    colorSelect.addEventListener('change', function () {
        selectedColor = colorSelect.value; // Colore selezionato
        ocrUpdatecolor(selectedColor);
    });
    fleetInputContainer.appendChild(colorSelect);

    const distanceInputContainer = document.createElement('div');
    distanceInputContainer.style.display = 'flex';
    distanceInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    distanceInputContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    distanceInputContainer.style.marginBottom = '10px';
    //distanceInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(distanceInputContainer);

    const distanceInputLabel = document.createElement('label');
    distanceInputLabel.textContent = 'move by:';
    distanceInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    distanceInputContainer.appendChild(distanceInputLabel);

    const coeffcheckContainer1 = document.createElement('div');
    coeffcheckContainer1.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer1);

    const coeffcheckLabel1 = document.createElement('label');
    coeffcheckLabel1.textContent = 'Coeff for c1';
    coeffcheckLabel1.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer1.appendChild(coeffcheckLabel1);

    const coeffcheckbox1 = document.createElement('input');
    coeffcheckbox1.type = 'checkbox';
    coeffcheckbox1.name = 'coeffcheckbox1';
    coeffcheckbox1.checked = true;
    coeffcheckContainer1.appendChild(coeffcheckbox1);

    const distpercContainer1 = document.createElement('div');
    distpercContainer1.style.display = 'flex';
    //distpercContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer1);

    const maxdistanceFromFleetTxt1 = document.createElement('input');
    maxdistanceFromFleetTxt1.type = 'number';
    maxdistanceFromFleetTxt1.min = '1';
    maxdistanceFromFleetTxt1.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt1.value = '5';
    maxdistanceFromFleetTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt1.style.padding = '5px';
    maxdistanceFromFleetTxt1.style.margin = '4px';
    distpercContainer1.appendChild(maxdistanceFromFleetTxt1);

    const probCellaTxt1 = document.createElement('input');
    probCellaTxt1.type = 'text';
    probCellaTxt1.name = 'probCellaTxt1';
    probCellaTxt1.size = '5';
    probCellaTxt1.value = 'prbC1Txt';
    probCellaTxt1.style.fontSize = '14px';
    probCellaTxt1.style.backgroundColor = 'yellow';
    probCellaTxt1.style.padding = '5px';
    probCellaTxt1.style.margin = '4px';
    probCellaTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer1.appendChild(probCellaTxt1);

    const cordCellaContainer1 = document.createElement('div');
    cordCellaContainer1.style.display = 'flex';
    cordCellaContainer1.style.margin = '1px';
    //cordCellaContainer1.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer1);

    const percCoordxTxt1 = document.createElement('input');
    percCoordxTxt1.type = 'text';
    percCoordxTxt1.value = 'N/A';
    percCoordxTxt1.name = 'cella_x1';
    percCoordxTxt1.size = '2';
    percCoordxTxt1.style.fontSize = '14px';
    percCoordxTxt1.style.backgroundColor = 'yellow';
    percCoordxTxt1.style.padding = '5px';
    percCoordxTxt1.style.margin = '4px';
    percCoordxTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer1.appendChild(percCoordxTxt1);

    const percCoordyTxt1 = document.createElement('input');
    percCoordyTxt1.type = 'text';
    percCoordyTxt1.value = 'N/A';
    percCoordyTxt1.name = 'cella_y1';
    percCoordyTxt1.size = '2';
    percCoordyTxt1.style.fontSize = '14px';
    percCoordyTxt1.style.backgroundColor = 'yellow';
    percCoordyTxt1.style.padding = '5px';
    percCoordyTxt1.style.margin = '4px';
    percCoordyTxt1.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer1.appendChild(percCoordyTxt1);

    const coeffcheckContainer2 = document.createElement('div');
    coeffcheckContainer2.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer2);

    const coeffcheckLabel2 = document.createElement('label');
    coeffcheckLabel2.textContent = 'Coeff for c2';
    coeffcheckLabel2.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer2.appendChild(coeffcheckLabel2);

    const coeffcheckbox2 = document.createElement('input');
    coeffcheckbox2.type = 'checkbox';
    coeffcheckbox2.name = 'coeffcheckbox2';
    coeffcheckbox2.checked = true;
    coeffcheckContainer2.appendChild(coeffcheckbox2);

    const distpercContainer2 = document.createElement('div');
    distpercContainer2.style.display = 'flex';
    //distpercContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer2);

    const maxdistanceFromFleetTxt2 = document.createElement('input');
    maxdistanceFromFleetTxt2.type = 'number';
    maxdistanceFromFleetTxt2.min = '1';
    maxdistanceFromFleetTxt2.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt2.value = '2';
    maxdistanceFromFleetTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt2.style.padding = '5px';
    maxdistanceFromFleetTxt2.style.margin = '4px';
    distpercContainer2.appendChild(maxdistanceFromFleetTxt2);

    const probCellaTxt2 = document.createElement('input');
    probCellaTxt2.type = 'text';
    probCellaTxt2.name = 'probCellaTxt2';
    probCellaTxt2.size = '5';
    probCellaTxt2.value = 'prbC1Txt';
    probCellaTxt2.style.fontSize = '14px';
    probCellaTxt2.style.backgroundColor = 'yellow';
    probCellaTxt2.style.padding = '5px';
    probCellaTxt2.style.margin = '4px';
    probCellaTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer2.appendChild(probCellaTxt2);

    const cordCellaContainer2 = document.createElement('div');
    cordCellaContainer2.style.display = 'flex';
    cordCellaContainer2.style.margin = '1px';
    //cordCellaContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer2);

    const percCoordxTxt2 = document.createElement('input');
    percCoordxTxt2.type = 'text';
    percCoordxTxt2.value = 'N/A';
    percCoordxTxt2.name = 'cella_x2';
    percCoordxTxt2.size = '2';
    percCoordxTxt2.style.fontSize = '14px';
    percCoordxTxt2.style.backgroundColor = 'yellow';
    percCoordxTxt2.style.padding = '5px';
    percCoordxTxt2.style.margin = '4px';
    percCoordxTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer2.appendChild(percCoordxTxt2);

    const percCoordyTxt2 = document.createElement('input');
    percCoordyTxt2.type = 'text';
    percCoordyTxt2.value = 'N/A';
    percCoordyTxt2.name = 'cella_y2';
    percCoordyTxt2.size = '2';
    percCoordyTxt2.style.fontSize = '14px';
    percCoordyTxt2.style.backgroundColor = 'yellow';
    percCoordyTxt2.style.padding = '5px';
    percCoordyTxt2.style.margin = '4px';
    percCoordyTxt2.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer2.appendChild(percCoordyTxt2);

    const coeffcheckContainer3 = document.createElement('div');
    coeffcheckContainer3.style.display = 'flex';
    //coeffcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(coeffcheckContainer3);

    const coeffcheckLabel3 = document.createElement('label');
    coeffcheckLabel3.textContent = 'Coeff for c3';
    coeffcheckLabel3.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    coeffcheckContainer3.appendChild(coeffcheckLabel3);

    const coeffcheckbox3 = document.createElement('input');
    coeffcheckbox3.type = 'checkbox';
    coeffcheckbox3.name = 'coeffcheckbox2';
    coeffcheckbox3.checked = false;
    coeffcheckContainer3.appendChild(coeffcheckbox3);

    const distpercContainer3 = document.createElement('div');
    distpercContainer3.style.display = 'flex';
    //distpercContainer3.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(distpercContainer3);

    const maxdistanceFromFleetTxt3 = document.createElement('input');
    maxdistanceFromFleetTxt3.type = 'number';
    maxdistanceFromFleetTxt3.min = '1';
    maxdistanceFromFleetTxt3.max = '99'; // Limita il numero massimo a 99
    maxdistanceFromFleetTxt3.value = '5';
    maxdistanceFromFleetTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxdistanceFromFleetTxt3.style.padding = '5px';
    maxdistanceFromFleetTxt3.style.margin = '4px';
    distpercContainer3.appendChild(maxdistanceFromFleetTxt3);

    const probCellaTxt3 = document.createElement('input');
    probCellaTxt3.type = 'text';
    probCellaTxt3.name = 'probCellaTxt3';
    probCellaTxt3.size = '5';
    probCellaTxt3.value = 'prbC1Txt';
    probCellaTxt3.style.fontSize = '14px';
    probCellaTxt3.style.backgroundColor = 'yellow';
    probCellaTxt3.style.padding = '5px';
    probCellaTxt3.style.margin = '4px';
    probCellaTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distpercContainer3.appendChild(probCellaTxt3);

    const cordCellaContainer3 = document.createElement('div');
    cordCellaContainer3.style.display = 'flex';
    cordCellaContainer3.style.margin = '1px';
    //cordCellaContainer3.style.border = '1px solid black'; // Aggiungi questa linea
    distanceInputContainer.appendChild(cordCellaContainer3);

    const percCoordxTxt3 = document.createElement('input');
    percCoordxTxt3.type = 'text';
    percCoordxTxt3.value = 'N/A';
    percCoordxTxt3.name = 'cella_x3';
    percCoordxTxt3.size = '2';
    percCoordxTxt3.style.fontSize = '14px';
    percCoordxTxt3.style.backgroundColor = 'yellow';
    percCoordxTxt3.style.padding = '5px';
    percCoordxTxt3.style.margin = '4px';
    percCoordxTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer3.appendChild(percCoordxTxt3);

    const percCoordyTxt3 = document.createElement('input');
    percCoordyTxt3.type = 'text';
    percCoordyTxt3.value = 'N/A';
    percCoordyTxt3.name = 'cella_y3';
    percCoordyTxt3.size = '2';
    percCoordyTxt3.style.fontSize = '14px';
    percCoordyTxt3.style.backgroundColor = 'yellow';
    percCoordyTxt3.style.padding = '5px';
    percCoordyTxt3.style.margin = '4px';
    percCoordyTxt3.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordCellaContainer3.appendChild(percCoordyTxt3);

    const percCoordContainer = document.createElement('div');
    percCoordContainer.style.display = 'flex';
    percCoordContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    percCoordContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    percCoordContainer.style.marginBottom = '10px';
    //percCoordContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(percCoordContainer);

    const AreaLabel = document.createElement('label');
    AreaLabel.textContent = 'max prob area';
    percCoordContainer.appendChild(AreaLabel);

    const cordAreaContainer1 = document.createElement('div');
    cordAreaContainer1.style.display = 'flex';
    cordAreaContainer1.style.margin = '1px';
    //cordAreaContainer1.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(cordAreaContainer1);

    const maxareaFromFleetTxt = document.createElement('input');
    maxareaFromFleetTxt.type = 'number';
    maxareaFromFleetTxt.min = '1';
    maxareaFromFleetTxt.max = '99'; // Limita il numero massimo a 99
    maxareaFromFleetTxt.value = '17';
    maxareaFromFleetTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    maxareaFromFleetTxt.style.padding = '5px';
    maxareaFromFleetTxt.style.margin = '4px';
    cordAreaContainer1.appendChild(maxareaFromFleetTxt);

    const probAreaTxt = document.createElement('input');
    probAreaTxt.type = 'text';
    probAreaTxt.value = 'probAreaTxt';
    probAreaTxt.name = 'probAreaTxt';
    probAreaTxt.style.fontSize = '14px';
    probAreaTxt.size = '5';
    probAreaTxt.style.backgroundColor = 'yellow';
    probAreaTxt.style.padding = '5px';
    probAreaTxt.style.margin = '4px';
    probAreaTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer1.appendChild(probAreaTxt);

    const cordAreaContainer2 = document.createElement('div');
    cordAreaContainer2.style.display = 'flex';
    cordAreaContainer2.style.margin = '1px';
    //cordAreaContainer2.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(cordAreaContainer2);

    const cordArea_x_Txt = document.createElement('input');
    cordArea_x_Txt.type = 'text';
    cordArea_x_Txt.value = 'N/A';
    cordArea_x_Txt.name = 'area_x';
    cordArea_x_Txt.size = '2';
    cordArea_x_Txt.style.fontSize = '14px';
    cordArea_x_Txt.style.backgroundColor = 'yellow';
    cordArea_x_Txt.style.padding = '5px';
    cordArea_x_Txt.style.margin = '4px';
    cordArea_x_Txt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer2.appendChild(cordArea_x_Txt);

    const cordArea_y_Txt = document.createElement('input');
    cordArea_y_Txt.type = 'text';
    cordArea_y_Txt.value = 'N/A';
    cordArea_y_Txt.name = 'area_y';
    cordArea_y_Txt.size = '2';
    cordArea_y_Txt.style.fontSize = '14px';
    cordArea_y_Txt.style.backgroundColor = 'yellow';
    cordArea_y_Txt.style.padding = '5px';
    cordArea_y_Txt.style.margin = '4px';
    cordArea_y_Txt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    cordAreaContainer2.appendChild(cordArea_y_Txt);

    const IncidenzaCountLabel = document.createElement('label');
    IncidenzaCountLabel.textContent = 'Inc. count';
    percCoordContainer.appendChild(IncidenzaCountLabel);

    const IncidenzaCountTxt = document.createElement('input');
    IncidenzaCountTxt.name = 'IncidenzaCountTxt';
    IncidenzaCountTxt.type = 'number';
    IncidenzaCountTxt.min = '0';
    IncidenzaCountTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaCountTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaCountTxt.value = '0.4';
    IncidenzaCountTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaCountTxt.style.padding = '5px';
    IncidenzaCountTxt.addEventListener('input', (e) => {
        incidenza_count = parseFloat(e.target.value);
    });
    percCoordContainer.appendChild(IncidenzaCountTxt);

    const IncidenzaSduLabel = document.createElement('label');
    IncidenzaSduLabel.textContent = 'Inc. sdu';
    percCoordContainer.appendChild(IncidenzaSduLabel);

    const IncidenzaSduTxt = document.createElement('input');
    IncidenzaSduTxt.name = 'IncidenzaSduTxt';
    IncidenzaSduTxt.type = 'number';
    IncidenzaSduTxt.min = '0';
    IncidenzaSduTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaSduTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaSduTxt.value = '0.2';
    IncidenzaSduTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaSduTxt.style.padding = '5px';
    IncidenzaSduTxt.addEventListener('input', (e) => {
        incidenza_sdu = parseFloat(e.target.value);
    }); percCoordContainer.appendChild(IncidenzaSduTxt);

    const probContainer = document.createElement('div');
    probContainer.style.display = 'flex';
    probContainer.style.margin = '5px';
    //probContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(probContainer);

    const sortProbLabel = document.createElement('label');
    sortProbLabel.textContent = 'sort %';
    probContainer.appendChild(sortProbLabel);

    const sortProbRadio = document.createElement('input');
    sortProbRadio.type = 'radio';
    sortProbRadio.name = 'sortOption';
    sortProbRadio.value = 'prob';
    probContainer.appendChild(sortProbRadio);

    const DistanceContainer = document.createElement('div');
    DistanceContainer.style.display = 'flex';
    DistanceContainer.style.margin = '5px';
    //DistanceContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(DistanceContainer);

    const sortDistanceLabel = document.createElement('label');
    sortDistanceLabel.textContent = 'sort dist.';
    DistanceContainer.appendChild(sortDistanceLabel);

    const sortDistanceRadio = document.createElement('input');
    sortDistanceRadio.type = 'radio';
    sortDistanceRadio.name = 'sortOption';
    sortDistanceRadio.checked = true;
    sortDistanceRadio.value = 'distance';
    DistanceContainer.appendChild(sortDistanceRadio);

    const CoeffsortCointainer = document.createElement('div');
    CoeffsortCointainer.style.display = 'flex';
    CoeffsortCointainer.style.margin = '5px';
    //CoeffsortCointainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(CoeffsortCointainer);

    const sortCoeffLabel = document.createElement('label');
    sortCoeffLabel.textContent = 'sort coeff';
    CoeffsortCointainer.appendChild(sortCoeffLabel);

    const sortCoeffRadio = document.createElement('input');
    sortCoeffRadio.type = 'radio';
    sortCoeffRadio.name = 'sortOption';
    sortCoeffRadio.value = 'distance';
    CoeffsortCointainer.appendChild(sortCoeffRadio);


    const button = document.createElement('button');
    button.textContent = 'Avvia Scansione Automatica';
    button.style.flex = '1';
    button.style.padding = '10px';
    button.style.backgroundColor = '#007BFF';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';
    container.appendChild(button);

    const tablecontainer = document.createElement('div');
    tablecontainer.style.maxHeight = '60px'; // Imposta l'altezza massima
    tablecontainer.style.overflowY = 'auto';  // Aggiunge lo scroll verticale
    tablecontainer.style.border = '1px solid black'; // Solo per debug
    tablecontainer.style.width = '100%';  // Per evitare overflow orizzontale
    tablecontainer.style.display = 'block'; // Assicura il corretto comportamento
    container.appendChild(tablecontainer);

    const table = document.createElement('table');
    table.style.width = '100%'; // La tabella deve riempire il contenitore
    table.style.height = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.marginTop = '10px';
    table.style.marginBottom = '10px';
    tablecontainer.appendChild(table);

    const byebyecontainer = document.createElement('div');
    byebyecontainer.style.border = 'solid';
    byebyecontainer.style.borderColor = 'gray';
    //byebyecontainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(byebyecontainer);

    const byebye = document.createElement('label');
    byebye.textContent = 'Report bugs, improvements or comment at lucadjr@hotmail.it                        if you like the app please donate 7sZFMdaGCATXsJuWfj19ExnLt9P7RVm4Bykmvz2Jrh5x';
    byebye.style.userSelect = 'text';
    byebyecontainer.appendChild(byebye);
    button.addEventListener('click', toggleScan);

    // Funzione per simulare il clic sul pulsante
    function simulateButtonClick() {
        if (typeof characterID !== 'undefined' && characterID != 0) {
            sa_getUserData(characterID);
        } else {
            toggleChars('on');
        }
    }
    // Esegui la funzione ogni 20 secondi (20000 millisecondi)
    setInterval(simulateButtonClick, 35000);

    function toggleScan() {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
            button.textContent = 'Avvia Scansione Automatica';
            button.style.backgroundColor = 'green';
        } else {
            intervalId = setInterval(scanData, 2000);
            button.textContent = 'Arresta Scansione Automatica';
            button.style.backgroundColor = 'red';
        }
    }
    // Esegui la scansione automatica ogni 2 secondi (2000 millisecondi)
    let intervalId = null;
    button.addEventListener('click', toggleScan);

    let savedCells = new Map(); // Memorizza le celle vicine con chiave "x,y"

    function scanData() {
        updateFleetPosition();
        const elements = document.querySelectorAll('.sector_sdu_txt');
        const data = [];
        const existingSectors = new Set();

        elements.forEach(el => {
            const prob = el.textContent.trim();
            if (prob !== '0%' && prob !== '') {
                const idParts = el.id.split('_');
                const x = parseFloat(idParts[idParts.length - 2]);
                const y = parseFloat(idParts[idParts.length - 1]);
                existingSectors.add(`${x},${y}`);

                const rectId = `sector_sdu_${x}_${y}`;
                const rectElement = document.getElementById(rectId);

                const count = rectElement?.getAttribute('count') || 'N/A';
                const sdu = rectElement?.getAttribute('sdu') || 'N/A';
                const time = rectElement?.getAttribute('time') || 'N/A';
                const timeOnly = time.split(' ')[1] || 'N/A';

                const distance = calculateDistance(currentX, currentY, x, y);
                const coeff = calculateCoeff(prob, count, sdu);

                const cellData = { coeff, prob, x, y, distance, count, sdu, time: timeOnly };

                // Se la distanza Ã¨ <= 2, salviamo la cella
                if (distance <= 2) {
                    savedCells.set(`${x},${y}`, cellData);
                }

                data.push(cellData);
            }
        });

        // Uniamo i dati salvati con i nuovi dati
        savedCells.forEach((value, key) => {
            if (!existingSectors.has(key)) {
                // Ricalcola la distanza con i valori attuali
                value.distance = calculateDistance(currentX, currentY, value.x, value.y);
                data.push(value);
            }
        });

        // Ordinamento
        if (sortProbRadio.checked) {
            data.sort((a, b) => parseFloat(b.prob) - parseFloat(a.prob));
        } else if (sortDistanceRadio.checked) {
            data.sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));
        } else {
            data.sort((a, b) => parseFloat(b.coeff) - parseFloat(a.coeff));
        }

        let filtered_data = filterData(data);
        let bestclose = update_celle(filtered_data);
        updateTable(filtered_data, bestclose);
    }

    function filterData(data) {
        if (DistanceLimitcheckbox.checked) {
            maxdistanceFromSB = parseInt(maxDistancefromSBTxt.value);
        } else {
            maxdistanceFromSB = maxDistancefromSB_valore_iniziale;
        }
        const filtered_Data = data.filter(item => calculateDistance(starbaseX, starbaseY, item.x, item.y) <= maxdistanceFromSB);

        return filtered_Data;
    }
    function findBestArea(data) {
        let bestArea = null;
        let maxAvgProb = -1;
        let bestCell = null;
        // Filtra i dati per includere solo i settori entro maxDistance dalla starbase
        const dati_filtrati_dist_fleet = data.filter(item => {
            const distanceFromFleet = calculateDistance(currentX, currentY, item.x, item.y);
            return distanceFromFleet <= parseInt(maxareaFromFleetTxt.value);
        });

        // Trova il valore della cella piÃ¹ bassa
        const minProb = Math.min(...dati_filtrati_dist_fleet.map(item => parseFloat(item.prob)));

        dati_filtrati_dist_fleet.forEach(item => {
            const { x, y } = item;
            const avgProb = prob_media_area(x, y, dati_filtrati_dist_fleet, minProb);
            if (avgProb > maxAvgProb) {
                maxAvgProb = avgProb;
                bestArea = { x, y, avgProb };
            }
        });

        if (bestArea) {
            let minDistance = Infinity;
            let closestCell = null;
            // calcola distanza tra il centro dell'area e currentX, currentY
            let distanceToArea = calculateDistance(currentX, currentY, bestArea.x, bestArea.y);
            if (distanceToArea > 6) {

                // Per ogni cella nella zona di interesse, calcoliamo la distanza da currentX, currentY
                for (let dx = -2; dx <= 2; dx++) {
                    for (let dy = -2; dy <= 2; dy++) {
                        const x = bestArea.x + dx;
                        const y = bestArea.y + dy;
                        const sectorData = data.find(item => item.x === x && item.y === y);
                        if (sectorData) {
                            const coeff = calculateCoeff(sectorData.prob, sectorData.count, sectorData.sdu);

                            // Calcola la distanza tra la cella corrente e currentX, currentY
                            const distanceToCurrent = calculateDistance(currentX, currentY, x, y);

                            // Se la distanza Ã¨ la piÃ¹ piccola finora, aggiorna la cella piÃ¹ vicina
                            if (distanceToCurrent < minDistance) {
                                minDistance = distanceToCurrent;
                                closestCell = { x, y, coeff, avgProb: bestArea.avgProb, distanceToCurrent };
                            }
                        }
                    }
                }

                bestCell = closestCell;  // Aggiorna bestCell per restituire la cella piÃ¹ vicina

            } else {
                bestCell = { x: bestArea.x, y: bestArea.y, coeff: 0, avgProb: bestArea.avgProb, distanceToCurrent: 0 };
            }

        }

        return bestCell;
    }
    function trovapercentuale(data, maxdistance, coeffchecked) {
        let maxProbInRange = -1;
        let maxCoeffInRange = -1;
        let closestToMaxProb = null;
        let closestToMaxCoeff = null;

        // ð Applichiamo il filtro simile a `findBestArea`
        const filteredData = data.filter(item => {
            const distanzacella = calculateDistance(currentX, currentY, item.x, item.y);
            return distanzacella <= maxdistance;
        });


        if (filteredData.length === 0) {
            return null;
        }

        // Troviamo i massimi valori di probabilitÃ  e coefficiente
        filteredData.forEach(item => {
            let prob = parseFloat(item.prob);
            let coeff = parseFloat(item.coeff);
            if (!isNaN(prob) && prob > maxProbInRange) maxProbInRange = prob;
            if (!isNaN(coeff) && coeff > maxCoeffInRange) maxCoeffInRange = coeff;
        });


        let minDistanceProb = Infinity;
        let minDistanceCoeff = Infinity;

        // Troviamo la cella con il valore massimo e distanza minima
        filteredData.forEach(item => {
            let distance = calculateDistance(currentX, currentY, item.x, item.y);
            let prob = parseFloat(item.prob);
            let coeff = parseFloat(item.coeff);

            if (!isNaN(prob) && prob === maxProbInRange && distance < minDistanceProb) {
                minDistanceProb = distance;
                closestToMaxProb = item;
            }

            if (!isNaN(coeff) && coeff === maxCoeffInRange && distance < minDistanceCoeff) {
                minDistanceCoeff = distance;
                closestToMaxCoeff = item;
            }
        });


        return coeffchecked ? closestToMaxCoeff : closestToMaxProb;
    }
    function update_celle(data) {
        const bestArea = findBestArea(data);
        cordArea_x_Txt.value = bestArea ? `${bestArea.x}` : 'N/A';
        cordArea_y_Txt.value = bestArea ? `${bestArea.y}` : 'N/A';
        probAreaTxt.value = bestArea ? parseInt(bestArea.avgProb).toString() : 'N/A';

        let bestclose1 = trovapercentuale(data, parseInt(maxdistanceFromFleetTxt1.value), coeffcheckbox1.checked);
        if (bestclose1 !== null) {
            probCellaTxt1.value = parseFloat(bestclose1.prob).toString();// + '%';
            percCoordxTxt1.value = bestclose1 ? `${bestclose1.x}` : 'N/A';// bestclose1.x;
            percCoordyTxt1.value = bestclose1 ? `${bestclose1.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }
        
        let bestclose2 = trovapercentuale(data, parseInt(maxdistanceFromFleetTxt2.value), coeffcheckbox2.checked);
        if (bestclose2 !== null) {
            probCellaTxt2.value = parseFloat(bestclose2.prob).toString();// + '%';
            percCoordxTxt2.value = bestclose2 ? `${bestclose2.x}` : 'N/A';// bestclose2.x;
            percCoordyTxt2.value = bestclose2 ? `${bestclose2.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }
        
        let bestclose3 = trovapercentuale(data, parseInt(maxdistanceFromFleetTxt3.value), coeffcheckbox3.checked);
        if (bestclose3 !== null) {
            probCellaTxt3.value = parseFloat(bestclose3.prob).toString();// + '%';
            percCoordxTxt3.value = bestclose3 ? `${bestclose3.x}` : 'N/A';// bestclose3.x;
            percCoordyTxt3.value = bestclose3 ? `${bestclose3.y}` : 'N/A'; // Aggiorniamo il campo di input con le coordinate
        }
        return bestclose1;
    }


    function prob_media_area(centerX, centerY, data, minProb) {
        let totalProb = 0;
        let count = 0;

        for (let dx = -2; dx <= 2; dx++) {
            for (let dy = -2; dy <= 2; dy++) {
                const x = centerX + dx;
                const y = centerY + dy;
                const sectorData = data.find(item => item.x === x && item.y === y);
                if (sectorData) {
                    totalProb += parseFloat(sectorData.prob);
                } else {
                    totalProb += minProb / 2;
                }
                count++;
            }
        }

        return count > 0 ? totalProb / count : 0;
    }

    function updateTable(data, bestclose) {

        // Aggiorna l'intestazione della tabella con le nuove colonne
        table.innerHTML = `
                    <tr>
                        <th style="border-bottom: 1px solid #ccc;">Coeff</th>
                        <th style="border-bottom: 1px solid #ccc;">Prob (%)</th>
                        <th style="border-bottom: 1px solid #ccc;">Count</th>
                        <th style="border-bottom: 1px solid #ccc;">SDU</th>
                        <th style="border-bottom: 1px solid #ccc;">Distanza</th>
                        <th style="border-bottom: 1px solid #ccc;">Coords</th>
                        <th style="border-bottom: 1px solid #ccc;">Time</th>
                    </tr>
                `;
        // Creiamo la tabella e evidenziamo la riga piÃ¹ vicina
        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `<td style="border-bottom: 1px solid #ccc; text-align: center;">${item.coeff.toFixed(1)}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.prob}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.count}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.sdu}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.distance}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.x},${item.y}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.time}</td>`;
            if (item === bestclose) {
                row.style.backgroundColor = selectedColor; // Evidenziamo solo la riga piÃ¹ vicina
            }
            if (item.distance == 0 && item.sdu == 1) {
                row.style.backgroundColor = 'red';
            }
            table.appendChild(row);
        });
    }
    function calculateCoeff(prob, count, sdu) {
        return (parseFloat(prob) / ((parseFloat(count) * incidenza_count) + 1) / ((parseFloat(sdu) * incidenza_sdu) + 1))
    }
    function calculateDistance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2);
    }
    function updateFleetPosition() { // e starbase input
        const starbaseInput = SBcoordsTxt.value.trim();

        const starbaseInputcoords = starbaseInput.split(',').map(num => parseFloat(num.trim()));
        if (starbaseInputcoords.length !== 2 || isNaN(starbaseInputcoords[0]) || isNaN(starbaseInputcoords[1])) {
            alert("Inserisci le coordinate nel formato corretto: x,y (es. 15,-9)");
            [starbaseX, starbaseY] = '11,-16';
        } else {
            [starbaseX, starbaseY] = starbaseInputcoords;
        }

        const fleetRow = document.querySelector(`#fleetStats .ui_fleet span[oncontextmenu*="${fleetName}"]`);
        if (fleetRow) {
            const stateRow = fleetRow.closest('tr').nextElementSibling;
            const tdElement = stateRow.querySelector('#fleet_selected_state');
            if (tdElement) {
                // Estrai tutte le coordinate presenti nel td
                const coordElements = tdElement.querySelectorAll('.ui_coordinate');
                if (coordElements.length > 0) {
                    // Mappa tutte le coordinate in formato [X, Y]
                    const allCoords = Array.from(coordElements).map(coordElement =>
                        coordElement.textContent.trim().replace('|', ',')
                    );
                    // Prendi l'ultima serie di coordinate
                    const finalCoords = allCoords[allCoords.length - 1];
                    [currentX, currentY] = finalCoords.split(',').map(coord => parseFloat(coord.trim()));
                    // Aggiorna il textContent con un messaggio flessibile
                    const scenarioDescription = tdElement.textContent
                        .replace(/\s+/g, ' ') // Rimuove spazi multipli
                        .trim();
                    currentPosition.textContent = `${scenarioDescription.replace('|', ',')}`;
                    currentPosition.style.backgroundColor = 'green';
                } else {
                    // Nessuna coordinata trovata
                    currentPosition.textContent = 'Posizione attuale: N/A';
                    currentPosition.style.backgroundColor = 'red';
                }
            } else {
                currentPosition.textContent = 'Posizione attuale: N/A';
                currentPosition.style.backgroundColor = 'red';
            }
        } else {
            currentPosition.textContent = 'Posizione attuale: N/A';
            currentPosition.style.backgroundColor = 'red';
        }
        // Seleziona l'elemento che contiene il titolo
        let fuelBarElement = document.getElementById("fleet_selected_fuel_bar");
        // Controlla se l'attributo title esiste
        if (fuelBarElement && fuelBarElement.firstElementChild) {
            let titleText = fuelBarElement.firstElementChild.getAttribute("title");
            // Trova la percentuale usando una regex
            let match = titleText.match(/\((\d+)%\)/);
            if (match) {
                fuel = match[1]; // Estrai solo il numero

                // Inserisci la percentuale in un elemento con id "fuelPercentageDisplay"
                fuelTxt.value = fuel + "%";
                if (DistanceLimitcheckbox.checked) {
                    let distanza_calc_fuel = fuel > 40
                        ? maxDistancefromSB_valore_iniziale
                        : Math.max(10, Math.floor((fuel / 40) * maxDistancefromSB_valore_iniziale));
                    let distanza_flotta = parseInt(calculateDistance(currentX, currentY, starbaseX, starbaseY));
                    if (distanza_calc_fuel < distanza_flotta) {
                        maxDistancefromSBTxt.value = distanza_flotta;
                    } else {
                        maxDistancefromSBTxt.value = distanza_calc_fuel
                    }
                }
                else {
                    maxDistancefromSBTxt.value = maxDistancefromSB_valore_iniziale;
                }
                //maxDistancefromSBTxt.value = fuel > 30 ? 20 : Math.floor((fuel / 30) * 20);
            }
        }
        // Seleziona l'elemento con l'id "fleet_selected_cargo"
        let cargoElement = document.getElementById("fleet_selected_cargo");
        if (cargoElement) {
            let cargoText = cargoElement.innerHTML;
            // Estrarre la percentuale tra parentesi (es. 93%)
            let percentageMatch = cargoText.match(/\((\d+)%\)/);
            // Estrarre il numero prima di "Food" (es. 31124)
            let foodMatch = cargoText.match(/([\d,.]+)\s*<span style="color:#08f414">Food<\/span>/);
            foodValue = foodMatch ? foodMatch[1] : "N/A";
        }
    }
    function ocrUpdatesize(size) {
        let sizestr = String(size) + 'px';
        probCellaTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordxTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        percCoordyTxt1.style.fontSize = sizestr; // Modifica la dimensione del font
        probAreaTxt.style.fontSize = sizestr; // Modifica la dimensione del font
        cordArea_x_Txt.style.fontSize = sizestr; // Modifica la dimensione del font
        cordArea_y_Txt.style.fontSize = sizestr; // Modifica la dimensione del font
        let sizeelement = String(50 + 3 * (size - 13)) + 'px';
        probCellaTxt1.style.width = sizeelement;
        percCoordxTxt1.style.width = sizeelement;
        percCoordyTxt1.style.width = sizeelement;
        probAreaTxt.style.width = sizeelement;
        cordArea_x_Txt.style.width = sizeelement;
        cordArea_y_Txt.style.width = sizeelement;
    }
    function ocrUpdatecolor(color) {
        probCellaTxt.style.backgroundColor = color; // Colore di sfondo giallo
        probAreaTxt.style.backgroundColor = color; // Colore di sfondo giallo
    }
})();
